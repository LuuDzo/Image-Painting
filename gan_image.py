{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "BiB72MKh554O"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch import optim\n",
        "from torch.nn import functional as F\n",
        "import torchvision\n",
        "from torchvision import transforms\n",
        "from torch.utils import data\n",
        "from PIL import Image\n",
        "import torch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "isHDiWa38vJi"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n"
          ]
        }
      ],
      "source": [
        "transform = transforms.Compose([\n",
        "    transforms.RandomHorizontalFlip(p=0.5),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Resize((32,32))\n",
        "])\n",
        "dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
        "test = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADLM4ua3IXhn",
        "outputId": "fc7d8202-4c5e-4914-c164-7ef38ff6b1d2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50000\n"
          ]
        }
      ],
      "source": [
        "  train_split, val_split, test_split = 0.6,0.2,0.2\n",
        "  train_size = int(len(dataset) * train_split)\n",
        "  val_size = int(len(dataset) * val_split)\n",
        "  test_size = int(len(dataset) * test_split)\n",
        "  print(train_size+val_size+test_size)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ZD9TZ8EI4_w",
        "outputId": "38f28a9d-d7c8-4805-85fd-65fe7fc2978c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "30000 10000 10000\n"
          ]
        }
      ],
      "source": [
        "train, val, test = data.random_split(dataset, (train_size, val_size, test_size))\n",
        "print(len(train), len(val), len(test))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "_LtgwEHjORu1"
      },
      "outputs": [],
      "source": [
        "def imshow(tensor):\n",
        "    if len(tensor.shape) == 4:\n",
        "        tensor = tensor[0]\n",
        "    plt.imshow(tensor[:3].permute(1, 2, 0))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "xMiGlA6vOuT2",
        "outputId": "def760e8-e97b-44bc-f311-08c8fd94e3eb"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torchvision\\transforms\\functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "imshow(train[0][0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "ud_Qa-NJO013"
      },
      "outputs": [],
      "source": [
        "def create_hole_mask(im_h, im_w, hole_h, hole_w):\n",
        "    i = int((im_h - hole_h + 1) * np.random.random())\n",
        "    j = int((im_w - hole_w + 1) * np.random.random())\n",
        "    mask = torch.zeros((1, im_h, im_w))\n",
        "    mask[0, i : i + hole_h, j : j + hole_w] = 1\n",
        "    return mask, (i, i + hole_h, j, j + hole_w)\n",
        "\n",
        "def create_hole_masks(N, im_h, im_w, hole_h, hole_w, same_size=True):\n",
        "    if same_size:\n",
        "        masks = [create_hole_mask(im_h, im_w, hole_h, hole_w) for _ in range(N)]\n",
        "    else:\n",
        "        h_min, h_max = hole_h\n",
        "        w_min, w_max = hole_w\n",
        "        hs, ws = np.random.randint(h_min, h_max, N), np.random.randint(w_min, w_max, N)\n",
        "        masks = [create_hole_mask(im_h, im_w, h, w) for h, w in zip(hs, ws)]\n",
        "\n",
        "    bounds = [mask[1] for mask in masks]\n",
        "    masks = [mask[0] for mask in masks]\n",
        "    masks = torch.cat(masks, dim=0)\n",
        "    return masks.unsqueeze(1), bounds\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "fZadwKwqM14b"
      },
      "outputs": [],
      "source": [
        "class Flatten(nn.Module):\n",
        "    def forward(self, input):\n",
        "        return input.view(input.shape[0], -1)\n",
        "\n",
        "class Unflatten(nn.Module):\n",
        "\n",
        "    def __init__(self, shape):\n",
        "        super(Unflatten, self).__init__()\n",
        "        self.shape = shape\n",
        "\n",
        "    def forward(self, X):\n",
        "        return X.view(-1, *self.shape)\n",
        "\n",
        "class Generator(nn.Module):\n",
        "\n",
        "    def __init__(self, im_channels):\n",
        "        super(Generator, self).__init__()\n",
        "\n",
        "\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Conv2d(im_channels + 1, 64, 5, stride=1, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(64),\n",
        "\n",
        "            nn.Conv2d(64, 128, 3, stride=2, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.Conv2d(128, 128, 3, stride=1, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "\n",
        "\n",
        "            nn.Conv2d(128, 256, 3, stride=2, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(256),\n",
        "            nn.Conv2d(256, 256, 3, stride=1, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(256),\n",
        "\n",
        "            nn.ConvTranspose2d(256, 128, 4, stride=2, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.Conv2d(128, 128, 3, stride=1, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "\n",
        "            nn.ConvTranspose2d(128, 64, 4, stride=2, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.Conv2d(64, 32, 3, stride=1, padding=1),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(32),\n",
        "            nn.Conv2d(32, im_channels, 3, stride=1, padding=1),\n",
        "        )\n",
        "\n",
        "    def forward(self, X):\n",
        "        out = self.net(X)\n",
        "        return out"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "rwalX8-6ODkY"
      },
      "outputs": [],
      "source": [
        "class LocalDiscriminator(nn.Module):\n",
        "    def __init__(self, im_channels, region_size=16):\n",
        "        super(LocalDiscriminator, self).__init__()\n",
        "\n",
        "        self.region_size = region_size\n",
        "\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Conv2d(im_channels + 1, 64, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.Conv2d(64, 128, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.Conv2d(128, 256, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(256),\n",
        "            nn.Conv2d(256, 512, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(512),\n",
        "            nn.Conv2d(512, 512, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(512),\n",
        "            Flatten(),\n",
        "            nn.Linear(512, 1024),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm1d(1024)\n",
        "        )\n",
        "\n",
        "    def forward(self, X, mask_bounds):\n",
        "\n",
        "        local_regions = self._get_local_regions(X, mask_bounds)\n",
        "        out = self.net(local_regions)\n",
        "\n",
        "        return out\n",
        "\n",
        "    def _get_local_regions(self, X, mask_bounds):\n",
        "\n",
        "        N, ch, im_h, im_w = X.shape\n",
        "        local_regions = torch.zeros((N, ch, self.region_size, self.region_size))\n",
        "\n",
        "        for i, bounds in enumerate(mask_bounds):\n",
        "            y1, y2, x1, x2 = bounds\n",
        "\n",
        "            ym, xm = (y1 + y2) // 2, (x1 + x2) // 2\n",
        "            y1, x1 = ym - self.region_size // 2, xm - self.region_size // 2\n",
        "            y2, x2 = y1 + self.region_size, x1 + self.region_size\n",
        "\n",
        "            if y1 < 0:\n",
        "                y1, y2 = 0, self.region_size\n",
        "            elif y2 > im_h:\n",
        "                y1, y2 = im_h - self.region_size, im_h\n",
        "\n",
        "            if x1 < 0:\n",
        "                x1, x2 = 0, self.region_size\n",
        "            elif x2 > im_w:\n",
        "                x1, x2 = im_w - self.region_size, im_w\n",
        "\n",
        "            local_regions[i, :, :, :] = X[i, :, y1 : y2, x1 : x2]\n",
        "\n",
        "        return local_regions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bv_LvVCGNN8B"
      },
      "outputs": [],
      "source": [
        "# model = LocalDiscriminator(im_channels=3, region_size=14)#.cuda()\n",
        "# model.eval()\n",
        "# model.net(train[0][0][:, :14, :14].unsqueeze(0)).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vKBrjTHXNN1S"
      },
      "outputs": [],
      "source": [
        "# masks, bounds = create_hole_masks(1, 10, 10, 3, 2, same_size=True)\n",
        "# print(masks.shape)\n",
        "# imshow(model._get_local_regions(train[0][0].unsqueeze(0), bounds))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "jW0DlObUSHMs"
      },
      "outputs": [],
      "source": [
        "class GlobalDiscriminator(nn.Module):\n",
        "    def __init__(self, im_channels):\n",
        "        super(GlobalDiscriminator, self).__init__()\n",
        "\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Conv2d(im_channels + 1, 64, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.Conv2d(64, 128, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.Conv2d(128, 256, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(256),\n",
        "            nn.Conv2d(256, 512, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(512),\n",
        "            nn.Conv2d(512, 512, 5, stride=2, padding=2),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm2d(512),\n",
        "#             nn.Conv2d(512, 512, 5, stride=2, padding=2),\n",
        "#             nn.LeakyReLU(0.1),\n",
        "#             nn.BatchNorm2d(512),\n",
        "            Flatten(),\n",
        "            nn.Linear(512, 1024),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.BatchNorm1d(1024)\n",
        "        )\n",
        "\n",
        "    def forward(self, X):\n",
        "        out = self.net(X)\n",
        "        return out\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "jY-6SEYUSOGy"
      },
      "outputs": [],
      "source": [
        "class Discriminator(nn.Module):\n",
        "    def __init__(self, local_d, global_d):\n",
        "        super(Discriminator, self).__init__()\n",
        "        self.local_discriminator = local_d\n",
        "        self.global_discriminator = global_d\n",
        "\n",
        "        self.fc = nn.Linear(2048, 1)\n",
        "\n",
        "    def forward(self, X, mask_bounds):\n",
        "        local_ = self.local_discriminator(X, mask_bounds)\n",
        "        global_ = self.global_discriminator(X)\n",
        "        concated = torch.cat((local_, global_), dim=1)\n",
        "        out = self.fc(concated)\n",
        "\n",
        "        return out\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "2MW6jci-STse"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "\n",
        "def cycle(iterable):\n",
        "    while True:\n",
        "        for x in iterable:\n",
        "            yield x\n",
        "\n",
        "def train_gan(g, d, train, val, g_o, d_o, params, masks_fn):\n",
        "\n",
        "    train_loader = data.DataLoader(train, batch_size=params['batch_size'], num_workers=0, pin_memory=True)\n",
        "    val_loader = data.DataLoader(val, params['val_batch_size'], shuffle=True, pin_memory=True)\n",
        "    val_loader = iter(cycle(val_loader))\n",
        "\n",
        "    optimizer_g = g_o\n",
        "    optimizer_d = d_o\n",
        "\n",
        "    T_c, T_d = params['T_c'], params['T_d']\n",
        "    w = params['w']\n",
        "    for epoch in range(params['epochs']):\n",
        "        ep_loss_g = 0.\n",
        "        ep_loss_d = 0.\n",
        "        fake_err = 0.\n",
        "        real_err = 0.\n",
        "\n",
        "        if epoch < T_c and epoch == 0:\n",
        "                print(f'\\n>>>> Training generator for {T_c} epochs.')\n",
        "\n",
        "        if epoch < T_c + T_d and epoch == T_c:\n",
        "                print(f'\\n>>>> Training discriminator for {T_d} epochs.')\n",
        "\n",
        "        if epoch == T_c + T_d:\n",
        "                print(f'\\n>>>> Training both generator and discriminator jointly.')\n",
        "\n",
        "        start_time = time.time()\n",
        "\n",
        "        g.train()\n",
        "        d.train()\n",
        "        for batch, _ in train_loader:\n",
        "\n",
        "            N = batch.shape[0]\n",
        "            batch = batch\n",
        "\n",
        "            masks_g, bounds_g = masks_fn(N)\n",
        "            batch_masked = batch.clone() * (1 - masks_g)\n",
        "            batch_with_masks = torch.cat((batch_masked, masks_g[:, :1]), dim=1)\n",
        "\n",
        "            fake = g(batch_with_masks)\n",
        "\n",
        "            loss_mse = (((batch - fake) * masks_g)**2).sum() / masks_g.sum()\n",
        "\n",
        "            if epoch < T_c:\n",
        "                loss_g = loss_mse\n",
        "                loss_g.backward()\n",
        "                optimizer_g.step()\n",
        "                optimizer_g.zero_grad()\n",
        "                ep_loss_g += loss_g.detach()\n",
        "                continue\n",
        "            else:\n",
        "                inpainted = batch.clone()\n",
        "                masks_byte = masks_g.byte()\n",
        "                inpainted[masks_byte] = fake.detach()[masks_byte].view(-1)\n",
        "                inpainted = torch.cat((inpainted, masks_g[:, :1]), dim=1)\n",
        "                d_fake = d(inpainted.detach(), bounds_g)\n",
        "\n",
        "                masks_d, bounds_d = masks_fn(N)\n",
        "                real = torch.cat((batch.clone(), masks_d[:, :1]), dim=1)\n",
        "                d_real = d(real, bounds_d)\n",
        "\n",
        "                loss_d_fake = (d_fake**2).mean()\n",
        "                loss_d_real = ((d_real - 1)**2).mean()\n",
        "                loss_d = (loss_d_fake + loss_d_real) / 2\n",
        "                loss_d.backward()\n",
        "                optimizer_d.step()\n",
        "                optimizer_d.zero_grad()\n",
        "\n",
        "                if epoch >= T_c + T_d:\n",
        "                    inpainted = batch.clone()\n",
        "                    inpainted[masks_byte] = fake[masks_byte].view(-1)\n",
        "                    inpainted = torch.cat((inpainted, masks_g[:, :1]), dim=1)\n",
        "                    d_fake = d(inpainted, bounds_g)\n",
        "                    loss_g = loss_mse + w * ((d_fake - 1)**2).mean()\n",
        "\n",
        "                    loss_g.backward()\n",
        "                    optimizer_g.step()\n",
        "                    optimizer_g.zero_grad()\n",
        "\n",
        "                    ep_loss_g += loss_g.detach()\n",
        "\n",
        "                ep_loss_d += loss_d.detach()\n",
        "                fake_err += loss_d_fake.detach()\n",
        "                real_err += loss_d_real.detach()\n",
        "#             break\n",
        "\n",
        "        if not T_c <= epoch < T_c + T_d:\n",
        "            g.eval()\n",
        "            val_batch = next(val_loader)[0]\n",
        "            N, ch, _, _ = val_batch.shape\n",
        "\n",
        "            masks, _ = masks_fn(N)\n",
        "            val_batch_masked = val_batch * (1 - masks)\n",
        "            val_batch_masked = torch.cat((val_batch_masked, masks[:, :1]), dim=1)\n",
        "            val_pred = g(val_batch_masked).detach()\n",
        "            val_loss = (((val_batch - val_pred) * masks)**2).sum() / masks.sum()\n",
        "            inpainted = val_batch.clone()\n",
        "            masks_byte = masks.byte()\n",
        "            inpainted[masks_byte] = val_pred[masks_byte]\n",
        "            imgs = [\n",
        "                val_batch[0],\n",
        "                masks[0],\n",
        "                val_batch_masked[:, :-1][0],\n",
        "                val_pred[0].clamp(0, 1),\n",
        "                inpainted[0]\n",
        "            ]\n",
        "            imshow(torch.cat(imgs, dim=2))\n",
        "            plt.axis('off')\n",
        "            plt.show()\n",
        "\n",
        "        print('epoch: %d, g_loss: %0.4f, val_loss: %0.4f, d_loss: %0.4f, fake_err: %0.4f, real_err: %0.4f, time: %0.2f' %\\\n",
        "              (epoch, ep_loss_g, val_loss, ep_loss_d, fake_err, real_err, time.time() - start_time))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "1FAc8CmkSZOr"
      },
      "outputs": [],
      "source": [
        "\n",
        "global_d = GlobalDiscriminator(im_channels=3)\n",
        "local_d = LocalDiscriminator(im_channels=3, region_size=16)\n",
        "discriminator = Discriminator(local_d=local_d, global_d=global_d)\n",
        "\n",
        "generator = Generator(im_channels=3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "id": "MVD9JLpMShrU",
        "outputId": "67770598-f57c-4fc8-e5e2-cff2579be684"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            ">>>> Training both generator and discriminator jointly.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\ASUS\\AppData\\Local\\Temp\\ipykernel_20900\\3385780156.py:61: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ..\\aten\\src\\ATen/native/IndexingUtils.h:28.)\n",
            "  inpainted[masks_byte] = fake.detach()[masks_byte].view(-1)\n",
            "C:\\Users\\ASUS\\AppData\\Local\\Temp\\ipykernel_20900\\3385780156.py:78: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ..\\aten\\src\\ATen/native/IndexingUtils.h:28.)\n",
            "  inpainted[masks_byte] = fake[masks_byte].view(-1)\n",
            "c:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\autograd\\__init__.py:200: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ..\\aten\\src\\ATen/native/IndexingUtils.h:28.)\n",
            "  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32mc:\\Users\\ASUS\\Desktop\\Image-Inpainting\\gan_image.ipynb Cell 16\u001b[0m line \u001b[0;36m1\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=15'>16</a>\u001b[0m optimizer_d \u001b[39m=\u001b[39m optim\u001b[39m.\u001b[39mAdam(discriminator\u001b[39m.\u001b[39mparameters(), lr\u001b[39m=\u001b[39mtrain_params[\u001b[39m'\u001b[39m\u001b[39mlearning_rate_d\u001b[39m\u001b[39m'\u001b[39m])\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=17'>18</a>\u001b[0m torch\u001b[39m.\u001b[39mcuda\u001b[39m.\u001b[39mempty_cache()\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=18'>19</a>\u001b[0m train_gan(generator, discriminator, train, val, optimizer_g, optimizer_d, train_params, gen_masks)\n",
            "\u001b[1;32mc:\\Users\\ASUS\\Desktop\\Image-Inpainting\\gan_image.ipynb Cell 16\u001b[0m line \u001b[0;36m8\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=79'>80</a>\u001b[0m d_fake \u001b[39m=\u001b[39m d(inpainted, bounds_g)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=80'>81</a>\u001b[0m loss_g \u001b[39m=\u001b[39m loss_mse \u001b[39m+\u001b[39m w \u001b[39m*\u001b[39m ((d_fake \u001b[39m-\u001b[39m \u001b[39m1\u001b[39m)\u001b[39m*\u001b[39m\u001b[39m*\u001b[39m\u001b[39m2\u001b[39m)\u001b[39m.\u001b[39mmean()\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=82'>83</a>\u001b[0m loss_g\u001b[39m.\u001b[39;49mbackward()\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=83'>84</a>\u001b[0m optimizer_g\u001b[39m.\u001b[39mstep()\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X22sZmlsZQ%3D%3D?line=84'>85</a>\u001b[0m optimizer_g\u001b[39m.\u001b[39mzero_grad()\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\_tensor.py:487\u001b[0m, in \u001b[0;36mTensor.backward\u001b[1;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[0;32m    477\u001b[0m \u001b[39mif\u001b[39;00m has_torch_function_unary(\u001b[39mself\u001b[39m):\n\u001b[0;32m    478\u001b[0m     \u001b[39mreturn\u001b[39;00m handle_torch_function(\n\u001b[0;32m    479\u001b[0m         Tensor\u001b[39m.\u001b[39mbackward,\n\u001b[0;32m    480\u001b[0m         (\u001b[39mself\u001b[39m,),\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    485\u001b[0m         inputs\u001b[39m=\u001b[39minputs,\n\u001b[0;32m    486\u001b[0m     )\n\u001b[1;32m--> 487\u001b[0m torch\u001b[39m.\u001b[39;49mautograd\u001b[39m.\u001b[39;49mbackward(\n\u001b[0;32m    488\u001b[0m     \u001b[39mself\u001b[39;49m, gradient, retain_graph, create_graph, inputs\u001b[39m=\u001b[39;49minputs\n\u001b[0;32m    489\u001b[0m )\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\autograd\\__init__.py:200\u001b[0m, in \u001b[0;36mbackward\u001b[1;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[0;32m    195\u001b[0m     retain_graph \u001b[39m=\u001b[39m create_graph\n\u001b[0;32m    197\u001b[0m \u001b[39m# The reason we repeat same the comment below is that\u001b[39;00m\n\u001b[0;32m    198\u001b[0m \u001b[39m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[0;32m    199\u001b[0m \u001b[39m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[1;32m--> 200\u001b[0m Variable\u001b[39m.\u001b[39;49m_execution_engine\u001b[39m.\u001b[39;49mrun_backward(  \u001b[39m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[0;32m    201\u001b[0m     tensors, grad_tensors_, retain_graph, create_graph, inputs,\n\u001b[0;32m    202\u001b[0m     allow_unreachable\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m, accumulate_grad\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m)\n",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "train_params = {}\n",
        "train_params['w'] = 0.0005\n",
        "train_params['learning_rate_g'] = 0.0001\n",
        "train_params['learning_rate_d'] = 0.00001\n",
        "train_params['batch_size'] = 800\n",
        "train_params['val_batch_size'] = 1024\n",
        "train_params['T_c'] = 0\n",
        "train_params['T_d'] = 0\n",
        "train_params['epochs'] = 2 + train_params['T_c'] + train_params['T_d']\n",
        "\n",
        "def gen_masks(N, ch=3):\n",
        "    masks, bounds = create_hole_masks(N, 32, 32, (5, 12), (5, 12), same_size=False)\n",
        "    return masks.repeat_interleave(ch, dim=1), bounds\n",
        "\n",
        "optimizer_g = optim.Adam(generator.parameters(), lr=train_params['learning_rate_g'])\n",
        "optimizer_d = optim.Adam(discriminator.parameters(), lr=train_params['learning_rate_d'])\n",
        "\n",
        "torch.cuda.empty_cache()\n",
        "train_gan(generator, discriminator, train, val, optimizer_g, optimizer_d, train_params, gen_masks)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "DdRF82a0Sm_-"
      },
      "outputs": [],
      "source": [
        "\n",
        "loss = 0\n",
        "pixels = 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 929
        },
        "id": "B6PPRDL7SrxX",
        "outputId": "70f1872f-0fd0-44cb-9664-68fe443759d7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<torch.utils.data.dataloader._SingleProcessDataLoaderIter object at 0x00000271293F3BD0>\n",
            "512\n",
            "tensor([7, 0, 1, 3, 0, 7, 6, 7, 7, 3, 0, 7, 5, 8, 9, 0, 8, 7, 3, 3, 3, 3, 0, 4,\n",
            "        5, 3, 5, 8, 6, 6, 6, 9, 0, 1, 7, 0, 3, 4, 3, 8, 5, 2, 1, 9, 4, 1, 9, 3,\n",
            "        6, 6, 2, 7, 4, 3, 6, 9, 1, 3, 0, 8, 8, 7, 1, 9, 4, 0, 1, 4, 7, 0, 2, 0,\n",
            "        9, 6, 2, 5, 3, 8, 0, 3, 4, 9, 5, 7, 4, 2, 1, 0, 3, 9, 4, 0, 5, 3, 6, 7,\n",
            "        0, 4, 7, 8, 2, 5, 7, 0, 0, 2, 2, 9, 2, 0, 1, 8, 5, 4, 0, 0, 0, 5, 4, 6,\n",
            "        5, 5, 1, 9, 0, 9, 4, 8, 8, 7, 7, 3, 7, 0, 1, 6, 7, 2, 1, 1, 2, 5, 5, 0,\n",
            "        9, 5, 8, 1, 2, 2, 4, 7, 3, 2, 5, 0, 3, 9, 8, 6, 5, 0, 7, 3, 0, 9, 4, 2,\n",
            "        4, 1, 7, 8, 6, 6, 5, 5, 5, 0, 0, 8, 1, 0, 0, 1, 9, 4, 1, 4, 3, 6, 2, 5,\n",
            "        3, 3, 4, 2, 0, 1, 7, 5, 9, 3, 3, 9, 0, 6, 6, 9, 9, 7, 3, 0, 0, 7, 0, 4,\n",
            "        8, 8, 9, 8, 9, 6, 7, 6, 2, 6, 3, 5, 3, 9, 4, 7, 4, 7, 0, 3, 0, 4, 4, 6,\n",
            "        8, 5, 4, 6, 6, 6, 6, 5, 8, 6, 3, 8, 4, 3, 5, 5, 3, 0, 3, 5, 6, 5, 5, 8,\n",
            "        5, 4, 0, 4, 9, 1, 8, 7, 3, 1, 6, 1, 3, 9, 5, 4, 0, 3, 3, 1, 6, 9, 7, 9,\n",
            "        1, 0, 8, 3, 0, 9, 6, 8, 9, 0, 7, 2, 6, 7, 9, 0, 2, 2, 8, 4, 9, 4, 0, 5,\n",
            "        4, 9, 8, 3, 6, 3, 4, 9, 7, 1, 2, 7, 1, 7, 8, 2, 2, 9, 5, 6, 8, 2, 5, 6,\n",
            "        1, 7, 4, 2, 4, 8, 9, 9, 3, 5, 9, 4, 9, 2, 7, 2, 3, 9, 0, 5, 5, 3, 7, 5,\n",
            "        5, 0, 7, 5, 0, 6, 8, 4, 5, 0, 7, 0, 0, 9, 1, 8, 3, 4, 8, 3, 8, 8, 1, 4,\n",
            "        0, 0, 7, 9, 8, 5, 0, 1, 8, 8, 1, 4, 6, 7, 7, 9, 8, 5, 3, 4, 7, 8, 5, 7,\n",
            "        3, 5, 2, 5, 8, 2, 2, 5, 8, 4, 4, 6, 3, 8, 8, 7, 7, 4, 3, 2, 5, 3, 0, 5,\n",
            "        2, 2, 0, 1, 5, 6, 3, 1, 0, 3, 7, 7, 1, 9, 7, 9, 1, 0, 7, 9, 2, 1, 0, 1,\n",
            "        0, 0, 1, 0, 2, 9, 6, 3, 8, 1, 0, 6, 7, 4, 1, 6, 9, 0, 7, 5, 6, 6, 9, 9,\n",
            "        0, 8, 3, 9, 0, 2, 0, 0, 8, 3, 4, 6, 1, 1, 0, 7, 7, 8, 3, 3, 2, 3, 0, 7,\n",
            "        9, 8, 4, 6, 5, 5, 0, 3])\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\ASUS\\AppData\\Local\\Temp\\ipykernel_20900\\1526891457.py:20: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ..\\aten\\src\\ATen/native/IndexingUtils.h:28.)\n",
            "  inpainted[masks_byte] = pred[masks_byte].view(-1)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "512\n",
            "tensor([3, 3, 2, 3, 1, 8, 5, 5, 7, 8, 8, 3, 2, 2, 8, 0, 0, 5, 9, 1, 5, 0, 5, 0,\n",
            "        5, 2, 5, 9, 5, 5, 8, 3, 6, 6, 5, 6, 7, 9, 7, 6, 5, 9, 3, 8, 0, 1, 6, 1,\n",
            "        4, 5, 3, 9, 2, 7, 3, 8, 5, 0, 1, 1, 3, 5, 2, 0, 0, 0, 0, 7, 6, 1, 5, 3,\n",
            "        5, 4, 0, 7, 4, 6, 8, 3, 0, 9, 7, 9, 4, 3, 7, 9, 1, 6, 0, 1, 9, 1, 2, 9,\n",
            "        8, 5, 8, 9, 8, 0, 0, 1, 7, 3, 8, 0, 7, 2, 9, 6, 3, 2, 2, 9, 4, 7, 9, 3,\n",
            "        8, 5, 8, 0, 2, 0, 9, 8, 4, 4, 6, 4, 5, 5, 0, 4, 0, 8, 0, 6, 7, 8, 8, 6,\n",
            "        9, 4, 7, 6, 6, 4, 2, 4, 2, 8, 6, 1, 0, 3, 8, 9, 2, 1, 1, 1, 3, 1, 2, 8,\n",
            "        2, 6, 3, 7, 6, 3, 7, 0, 7, 1, 9, 0, 0, 9, 2, 9, 0, 7, 3, 4, 8, 7, 7, 7,\n",
            "        2, 5, 3, 9, 1, 1, 7, 7, 1, 2, 2, 2, 1, 9, 7, 2, 0, 6, 8, 5, 0, 7, 8, 0,\n",
            "        0, 3, 4, 3, 5, 1, 8, 3, 6, 0, 6, 8, 8, 6, 8, 6, 3, 4, 5, 3, 3, 9, 9, 8,\n",
            "        2, 1, 2, 5, 4, 3, 7, 4, 6, 1, 6, 4, 9, 8, 8, 4, 7, 4, 5, 9, 6, 1, 4, 9,\n",
            "        0, 6, 1, 5, 7, 9, 3, 1, 4, 5, 2, 8, 7, 0, 3, 5, 9, 9, 4, 1, 9, 3, 1, 8,\n",
            "        1, 1, 0, 7, 0, 7, 9, 9, 4, 0, 9, 5, 5, 5, 5, 7, 3, 1, 0, 8, 6, 5, 4, 0,\n",
            "        4, 9, 5, 9, 0, 8, 4, 5, 7, 0, 6, 9, 9, 4, 1, 3, 2, 7, 2, 0, 3, 5, 2, 6,\n",
            "        8, 4, 8, 7, 5, 0, 9, 9, 5, 2, 7, 4, 4, 9, 1, 3, 6, 5, 3, 8, 2, 8, 8, 7,\n",
            "        5, 9, 6, 8, 2, 7, 8, 3, 9, 6, 4, 1, 8, 0, 7, 0, 9, 8, 2, 0, 5, 0, 1, 6,\n",
            "        9, 9, 1, 0, 3, 8, 8, 1, 8, 4, 9, 5, 7, 5, 7, 7, 5, 5, 6, 4, 2, 9, 3, 0,\n",
            "        6, 0, 2, 4, 6, 9, 5, 6, 0, 7, 9, 6, 2, 2, 2, 5, 2, 7, 3, 3, 5, 5, 8, 8,\n",
            "        0, 1, 2, 5, 6, 6, 0, 1, 5, 2, 9, 5, 2, 8, 7, 1, 9, 8, 5, 0, 1, 5, 8, 8,\n",
            "        4, 6, 5, 2, 5, 5, 8, 5, 2, 0, 7, 2, 1, 1, 4, 0, 3, 4, 7, 9, 7, 0, 8, 0,\n",
            "        0, 2, 4, 3, 5, 6, 4, 9, 4, 1, 4, 1, 2, 6, 2, 1, 6, 3, 8, 9, 8, 2, 8, 5,\n",
            "        8, 5, 8, 3, 0, 1, 6, 5])\n",
            "512\n",
            "tensor([1, 5, 7, 8, 4, 5, 4, 1, 9, 7, 1, 7, 6, 5, 4, 3, 8, 4, 3, 2, 4, 7, 6, 8,\n",
            "        3, 3, 3, 1, 4, 5, 7, 3, 8, 8, 9, 8, 3, 1, 3, 9, 5, 8, 8, 4, 5, 3, 2, 5,\n",
            "        6, 3, 7, 3, 3, 4, 5, 1, 9, 0, 8, 3, 1, 9, 8, 0, 3, 3, 6, 8, 7, 0, 9, 0,\n",
            "        3, 7, 4, 1, 0, 8, 2, 1, 6, 3, 4, 1, 5, 4, 8, 3, 0, 7, 1, 2, 9, 0, 7, 9,\n",
            "        3, 7, 3, 9, 1, 8, 8, 8, 3, 4, 8, 5, 0, 1, 9, 4, 8, 3, 2, 8, 3, 2, 5, 3,\n",
            "        6, 8, 4, 7, 3, 6, 9, 7, 5, 7, 8, 7, 4, 9, 3, 3, 9, 9, 5, 3, 4, 8, 2, 4,\n",
            "        6, 4, 2, 5, 8, 2, 9, 5, 3, 4, 9, 8, 5, 5, 1, 6, 7, 6, 4, 2, 2, 8, 8, 9,\n",
            "        1, 1, 0, 0, 1, 6, 1, 6, 2, 0, 4, 0, 3, 0, 9, 7, 3, 1, 9, 9, 2, 8, 9, 0,\n",
            "        9, 3, 4, 2, 9, 0, 3, 5, 0, 2, 3, 8, 3, 7, 6, 0, 6, 1, 4, 8, 9, 4, 1, 7,\n",
            "        9, 2, 1, 7, 4, 8, 3, 5, 7, 6, 2, 7, 0, 2, 5, 2, 9, 8, 1, 9, 0, 5, 0, 7,\n",
            "        9, 6, 6, 4, 2, 2, 2, 5, 7, 5, 5, 7, 3, 2, 7, 4, 8, 7, 5, 5, 2, 7, 1, 0,\n",
            "        3, 1, 2, 4, 2, 5, 1, 7, 7, 7, 2, 8, 8, 5, 0, 1, 1, 0, 1, 9, 4, 7, 8, 9,\n",
            "        2, 8, 9, 9, 3, 1, 1, 3, 1, 2, 6, 5, 8, 6, 4, 2, 2, 6, 8, 1, 2, 5, 0, 4,\n",
            "        7, 8, 4, 3, 5, 6, 6, 7, 1, 2, 9, 7, 4, 7, 8, 6, 8, 2, 5, 8, 8, 1, 4, 6,\n",
            "        2, 5, 7, 5, 7, 5, 3, 3, 3, 1, 0, 5, 8, 9, 0, 3, 6, 9, 4, 2, 6, 1, 3, 3,\n",
            "        8, 6, 2, 7, 7, 4, 4, 9, 8, 6, 1, 8, 5, 5, 6, 2, 8, 5, 1, 6, 4, 9, 8, 4,\n",
            "        0, 6, 9, 3, 5, 0, 7, 5, 5, 0, 2, 9, 8, 6, 5, 5, 3, 3, 4, 7, 5, 8, 5, 4,\n",
            "        7, 1, 6, 6, 6, 5, 9, 7, 5, 8, 2, 2, 5, 8, 1, 8, 1, 8, 0, 9, 2, 5, 2, 1,\n",
            "        2, 1, 4, 1, 7, 4, 9, 0, 7, 8, 2, 1, 2, 7, 6, 2, 0, 0, 7, 3, 4, 5, 8, 1,\n",
            "        6, 6, 5, 8, 9, 3, 7, 2, 7, 9, 4, 2, 0, 5, 7, 8, 4, 3, 8, 8, 9, 4, 0, 8,\n",
            "        8, 7, 2, 7, 9, 2, 9, 7, 4, 7, 6, 5, 4, 5, 3, 2, 8, 6, 6, 3, 1, 5, 4, 3,\n",
            "        9, 9, 0, 2, 7, 0, 8, 5])\n",
            "512\n",
            "tensor([1, 3, 5, 6, 0, 6, 5, 7, 7, 1, 5, 4, 8, 0, 0, 6, 1, 6, 5, 9, 8, 0, 4, 4,\n",
            "        9, 0, 6, 5, 0, 9, 4, 6, 2, 5, 6, 1, 4, 9, 7, 4, 5, 4, 2, 3, 5, 7, 6, 2,\n",
            "        7, 8, 2, 2, 2, 0, 1, 0, 5, 2, 6, 4, 6, 3, 2, 9, 4, 3, 5, 9, 4, 3, 0, 2,\n",
            "        3, 6, 4, 3, 0, 4, 7, 1, 4, 2, 2, 6, 6, 0, 9, 4, 0, 2, 5, 3, 8, 5, 8, 7,\n",
            "        9, 6, 3, 7, 8, 5, 6, 8, 9, 5, 1, 5, 3, 0, 2, 8, 4, 5, 5, 7, 6, 1, 1, 2,\n",
            "        8, 4, 1, 6, 8, 5, 2, 6, 4, 0, 0, 3, 4, 7, 1, 4, 2, 5, 0, 1, 4, 8, 5, 1,\n",
            "        7, 3, 3, 2, 1, 5, 3, 1, 9, 3, 3, 9, 9, 5, 0, 8, 6, 3, 3, 8, 6, 7, 6, 1,\n",
            "        2, 5, 0, 1, 0, 5, 2, 3, 0, 3, 6, 6, 6, 1, 8, 4, 5, 1, 6, 2, 9, 3, 3, 9,\n",
            "        8, 1, 1, 2, 6, 6, 6, 4, 3, 5, 8, 7, 9, 9, 6, 5, 8, 0, 0, 2, 3, 9, 2, 5,\n",
            "        2, 4, 5, 1, 4, 0, 1, 6, 9, 7, 0, 9, 4, 1, 4, 2, 3, 4, 7, 5, 1, 8, 5, 5,\n",
            "        0, 8, 6, 2, 1, 0, 0, 9, 6, 2, 6, 8, 3, 2, 8, 0, 7, 1, 3, 6, 7, 7, 8, 6,\n",
            "        4, 4, 8, 3, 5, 4, 5, 2, 0, 5, 2, 5, 8, 7, 2, 6, 4, 3, 8, 4, 1, 2, 5, 3,\n",
            "        4, 6, 7, 8, 1, 5, 8, 6, 5, 0, 0, 3, 6, 5, 3, 4, 6, 6, 1, 8, 0, 3, 0, 6,\n",
            "        3, 5, 0, 5, 3, 3, 5, 3, 7, 7, 6, 3, 2, 1, 5, 4, 3, 0, 5, 6, 4, 6, 3, 0,\n",
            "        9, 8, 5, 4, 4, 8, 6, 4, 9, 6, 6, 1, 3, 0, 4, 9, 5, 3, 0, 1, 9, 4, 6, 2,\n",
            "        7, 1, 0, 4, 5, 9, 9, 0, 9, 8, 4, 9, 5, 5, 4, 5, 5, 9, 7, 7, 8, 1, 6, 3,\n",
            "        6, 2, 5, 2, 3, 8, 6, 9, 6, 4, 1, 5, 9, 3, 1, 8, 9, 8, 7, 2, 2, 1, 8, 0,\n",
            "        7, 3, 8, 9, 5, 7, 0, 9, 1, 7, 9, 3, 2, 5, 0, 1, 3, 4, 9, 1, 1, 1, 3, 2,\n",
            "        6, 8, 2, 4, 4, 6, 7, 8, 3, 1, 2, 1, 2, 8, 6, 0, 4, 0, 7, 8, 5, 3, 7, 9,\n",
            "        3, 5, 2, 5, 9, 5, 2, 7, 4, 0, 1, 1, 5, 7, 7, 5, 4, 3, 8, 2, 7, 2, 6, 0,\n",
            "        3, 2, 9, 3, 7, 1, 0, 7, 9, 3, 2, 3, 6, 5, 1, 3, 3, 4, 7, 3, 3, 4, 2, 8,\n",
            "        6, 1, 9, 5, 2, 1, 3, 8])\n",
            "512\n",
            "tensor([6, 7, 0, 2, 1, 8, 1, 3, 3, 4, 6, 5, 4, 3, 9, 5, 3, 3, 0, 6, 0, 9, 4, 5,\n",
            "        5, 0, 8, 9, 5, 1, 6, 3, 3, 1, 5, 2, 9, 0, 3, 6, 5, 2, 6, 0, 6, 8, 6, 6,\n",
            "        4, 2, 4, 1, 0, 4, 8, 3, 9, 6, 6, 4, 2, 1, 0, 6, 1, 7, 9, 9, 6, 5, 7, 9,\n",
            "        2, 4, 5, 8, 1, 4, 5, 6, 2, 2, 6, 8, 6, 1, 4, 5, 0, 0, 0, 8, 6, 0, 5, 2,\n",
            "        4, 9, 6, 5, 5, 0, 5, 3, 0, 6, 7, 8, 2, 4, 2, 3, 4, 1, 1, 3, 1, 3, 4, 8,\n",
            "        2, 8, 0, 3, 5, 5, 0, 2, 4, 1, 3, 7, 8, 3, 5, 7, 6, 2, 4, 3, 0, 5, 8, 9,\n",
            "        3, 9, 4, 6, 8, 2, 1, 4, 4, 6, 7, 5, 9, 8, 1, 9, 0, 3, 2, 7, 9, 7, 9, 6,\n",
            "        7, 3, 2, 6, 1, 3, 9, 2, 9, 6, 6, 4, 9, 3, 0, 0, 0, 1, 6, 3, 0, 0, 2, 4,\n",
            "        1, 9, 4, 8, 6, 5, 8, 0, 4, 0, 4, 8, 5, 3, 4, 4, 9, 6, 9, 6, 8, 3, 5, 7,\n",
            "        3, 5, 3, 3, 8, 8, 2, 6, 8, 5, 9, 1, 5, 7, 6, 1, 9, 5, 8, 3, 3, 3, 2, 5,\n",
            "        3, 3, 1, 0, 0, 2, 1, 3, 6, 2, 5, 3, 5, 5, 2, 3, 0, 6, 6, 9, 2, 9, 1, 1,\n",
            "        5, 6, 0, 6, 9, 7, 1, 7, 5, 1, 5, 2, 0, 3, 5, 8, 5, 4, 5, 3, 4, 2, 8, 9,\n",
            "        2, 9, 1, 6, 0, 3, 3, 7, 9, 8, 6, 1, 2, 9, 6, 9, 9, 1, 9, 3, 9, 8, 4, 5,\n",
            "        7, 9, 8, 5, 8, 6, 4, 4, 7, 8, 5, 9, 1, 3, 7, 2, 3, 0, 2, 1, 0, 0, 7, 4,\n",
            "        5, 8, 2, 3, 0, 7, 2, 5, 1, 5, 5, 7, 5, 9, 9, 5, 3, 4, 6, 5, 7, 7, 4, 4,\n",
            "        2, 3, 1, 9, 5, 0, 3, 2, 0, 8, 9, 4, 9, 8, 6, 6, 7, 8, 3, 2, 3, 1, 3, 9,\n",
            "        1, 5, 9, 7, 3, 7, 7, 5, 5, 4, 7, 7, 6, 7, 8, 1, 7, 4, 9, 0, 8, 5, 4, 8,\n",
            "        7, 4, 1, 0, 0, 8, 8, 1, 5, 3, 4, 6, 1, 3, 3, 9, 1, 0, 6, 5, 6, 4, 8, 7,\n",
            "        1, 1, 5, 1, 6, 0, 0, 5, 5, 7, 5, 9, 2, 1, 2, 1, 6, 0, 0, 1, 4, 3, 3, 1,\n",
            "        8, 5, 9, 3, 9, 2, 5, 3, 8, 3, 0, 7, 9, 6, 7, 6, 2, 4, 1, 4, 1, 3, 1, 1,\n",
            "        1, 2, 6, 9, 6, 8, 1, 3, 3, 7, 9, 2, 4, 9, 5, 5, 5, 5, 8, 2, 7, 0, 1, 1,\n",
            "        4, 0, 7, 0, 6, 6, 7, 1])\n",
            "512\n",
            "tensor([9, 0, 7, 1, 1, 0, 7, 6, 7, 6, 5, 0, 5, 8, 5, 5, 6, 6, 3, 8, 6, 9, 1, 5,\n",
            "        7, 2, 2, 3, 8, 5, 5, 5, 2, 0, 8, 5, 6, 1, 3, 9, 6, 5, 3, 8, 4, 5, 4, 3,\n",
            "        3, 0, 0, 8, 5, 2, 4, 3, 4, 3, 1, 3, 8, 4, 7, 8, 8, 8, 3, 9, 9, 9, 9, 7,\n",
            "        1, 5, 6, 1, 3, 0, 5, 3, 9, 6, 7, 0, 4, 4, 0, 4, 9, 9, 4, 7, 7, 0, 9, 5,\n",
            "        3, 5, 2, 1, 5, 3, 8, 3, 4, 1, 2, 5, 3, 4, 5, 3, 3, 2, 4, 5, 9, 8, 7, 4,\n",
            "        4, 5, 4, 5, 9, 6, 0, 4, 5, 5, 6, 8, 2, 2, 1, 7, 0, 2, 2, 1, 0, 0, 9, 3,\n",
            "        9, 2, 4, 0, 8, 8, 3, 7, 3, 1, 0, 8, 2, 4, 4, 1, 8, 0, 1, 2, 9, 7, 6, 3,\n",
            "        8, 4, 9, 9, 7, 2, 0, 0, 3, 6, 3, 4, 3, 6, 9, 9, 3, 3, 0, 9, 5, 3, 7, 6,\n",
            "        2, 5, 2, 3, 8, 8, 6, 0, 8, 1, 3, 2, 3, 6, 9, 6, 8, 9, 8, 9, 2, 0, 6, 2,\n",
            "        6, 6, 4, 7, 5, 1, 1, 0, 5, 1, 6, 3, 0, 4, 3, 6, 1, 6, 2, 0, 9, 3, 7, 7,\n",
            "        3, 7, 4, 7, 2, 9, 0, 6, 1, 1, 5, 9, 5, 9, 4, 8, 7, 1, 6, 8, 3, 9, 3, 1,\n",
            "        4, 6, 0, 5, 9, 9, 7, 8, 5, 1, 8, 6, 2, 3, 8, 8, 9, 4, 5, 2, 8, 7, 0, 7,\n",
            "        2, 0, 1, 0, 2, 6, 7, 4, 3, 0, 5, 2, 6, 9, 6, 7, 4, 8, 1, 8, 0, 3, 3, 0,\n",
            "        5, 9, 8, 8, 8, 8, 7, 0, 4, 2, 4, 7, 5, 5, 5, 1, 4, 8, 8, 5, 8, 5, 1, 6,\n",
            "        6, 3, 5, 2, 6, 8, 4, 2, 7, 6, 6, 3, 7, 0, 2, 8, 5, 1, 5, 6, 4, 8, 8, 6,\n",
            "        2, 2, 0, 8, 9, 1, 0, 6, 6, 6, 2, 6, 7, 0, 0, 7, 7, 8, 4, 2, 1, 6, 0, 3,\n",
            "        3, 8, 0, 6, 7, 7, 3, 0, 7, 8, 9, 5, 9, 2, 8, 4, 5, 2, 7, 1, 7, 6, 5, 7,\n",
            "        0, 6, 8, 1, 2, 1, 5, 0, 1, 8, 9, 2, 4, 6, 8, 6, 5, 9, 3, 8, 2, 9, 3, 5,\n",
            "        7, 3, 2, 8, 0, 8, 7, 9, 3, 3, 3, 1, 0, 4, 8, 8, 9, 9, 1, 0, 5, 9, 3, 4,\n",
            "        2, 8, 2, 7, 9, 2, 0, 8, 7, 5, 6, 7, 4, 4, 0, 0, 3, 1, 0, 4, 2, 1, 2, 0,\n",
            "        8, 0, 4, 4, 4, 7, 9, 7, 2, 8, 4, 2, 0, 0, 1, 0, 7, 2, 7, 9, 3, 6, 0, 6,\n",
            "        5, 8, 6, 3, 2, 4, 0, 9])\n",
            "512\n",
            "tensor([7, 4, 5, 3, 3, 1, 2, 9, 2, 1, 3, 7, 0, 5, 5, 9, 6, 5, 4, 9, 5, 1, 6, 4,\n",
            "        6, 9, 1, 7, 8, 4, 7, 4, 6, 3, 0, 2, 5, 7, 8, 5, 6, 1, 9, 4, 7, 5, 1, 5,\n",
            "        5, 1, 8, 8, 5, 3, 9, 7, 5, 7, 5, 9, 0, 0, 8, 0, 3, 9, 6, 3, 8, 1, 7, 6,\n",
            "        8, 4, 3, 1, 5, 5, 5, 6, 4, 3, 3, 4, 3, 7, 8, 4, 0, 4, 5, 7, 0, 2, 0, 0,\n",
            "        4, 4, 7, 8, 8, 0, 3, 5, 7, 0, 9, 3, 1, 6, 2, 0, 8, 9, 2, 0, 8, 8, 1, 6,\n",
            "        4, 4, 4, 9, 8, 2, 8, 7, 7, 6, 8, 3, 1, 3, 1, 0, 8, 7, 6, 8, 7, 3, 4, 8,\n",
            "        2, 0, 7, 8, 1, 8, 8, 3, 3, 8, 5, 9, 6, 7, 7, 5, 0, 6, 0, 8, 1, 3, 6, 9,\n",
            "        6, 6, 8, 0, 5, 2, 9, 8, 4, 8, 5, 6, 9, 1, 2, 0, 0, 6, 9, 6, 7, 6, 4, 4,\n",
            "        9, 9, 7, 3, 0, 4, 2, 4, 7, 9, 5, 7, 6, 8, 7, 3, 1, 9, 0, 8, 5, 0, 5, 4,\n",
            "        5, 6, 4, 6, 8, 3, 4, 3, 4, 8, 7, 7, 0, 4, 2, 1, 4, 0, 6, 9, 8, 9, 4, 3,\n",
            "        1, 0, 4, 7, 6, 4, 7, 1, 2, 0, 1, 5, 7, 6, 5, 0, 7, 0, 1, 1, 2, 7, 6, 9,\n",
            "        1, 8, 3, 0, 7, 0, 2, 0, 8, 9, 9, 4, 8, 2, 3, 1, 1, 3, 4, 4, 1, 0, 9, 0,\n",
            "        1, 7, 9, 4, 4, 6, 8, 8, 2, 6, 1, 1, 6, 9, 6, 9, 7, 5, 6, 5, 7, 0, 8, 1,\n",
            "        0, 5, 8, 0, 9, 4, 8, 1, 8, 7, 5, 2, 3, 3, 9, 6, 3, 5, 3, 2, 5, 7, 2, 3,\n",
            "        9, 2, 1, 2, 9, 5, 5, 4, 4, 3, 4, 0, 1, 6, 1, 7, 5, 3, 7, 0, 1, 8, 7, 1,\n",
            "        2, 6, 4, 2, 5, 4, 2, 9, 2, 5, 8, 3, 2, 2, 9, 2, 7, 4, 1, 4, 2, 4, 2, 9,\n",
            "        5, 6, 4, 2, 7, 0, 9, 8, 4, 4, 1, 1, 4, 3, 7, 7, 8, 1, 5, 7, 7, 9, 8, 3,\n",
            "        6, 8, 8, 1, 5, 5, 1, 3, 5, 2, 2, 5, 5, 4, 9, 1, 3, 8, 4, 2, 3, 7, 5, 2,\n",
            "        3, 7, 7, 8, 7, 5, 0, 1, 2, 0, 0, 6, 5, 8, 2, 6, 6, 3, 1, 8, 3, 7, 4, 2,\n",
            "        1, 8, 8, 5, 1, 4, 8, 2, 3, 4, 4, 7, 6, 1, 3, 2, 1, 2, 5, 1, 3, 3, 5, 3,\n",
            "        5, 4, 1, 0, 1, 1, 3, 9, 8, 4, 8, 8, 5, 3, 9, 2, 8, 4, 9, 1, 9, 9, 3, 5,\n",
            "        9, 3, 9, 8, 2, 0, 4, 6])\n",
            "512\n",
            "tensor([4, 7, 2, 1, 8, 0, 2, 5, 7, 4, 4, 7, 5, 1, 1, 3, 0, 9, 0, 1, 7, 0, 3, 5,\n",
            "        4, 0, 7, 0, 0, 0, 5, 2, 0, 5, 3, 5, 2, 0, 1, 7, 4, 4, 1, 8, 5, 8, 4, 5,\n",
            "        4, 6, 3, 3, 1, 1, 2, 3, 0, 4, 0, 0, 9, 6, 7, 9, 3, 3, 5, 0, 7, 3, 4, 6,\n",
            "        7, 9, 9, 9, 3, 0, 1, 1, 4, 1, 9, 9, 3, 2, 6, 7, 1, 0, 4, 4, 0, 1, 7, 0,\n",
            "        6, 4, 0, 8, 1, 7, 3, 2, 8, 0, 4, 0, 8, 9, 3, 7, 5, 9, 4, 4, 3, 8, 4, 9,\n",
            "        0, 5, 2, 7, 2, 9, 4, 0, 8, 3, 9, 7, 3, 5, 5, 0, 4, 4, 7, 5, 8, 1, 0, 5,\n",
            "        8, 5, 5, 1, 9, 8, 2, 3, 1, 4, 5, 2, 7, 0, 6, 4, 0, 5, 0, 6, 8, 5, 0, 2,\n",
            "        8, 1, 8, 2, 9, 5, 7, 5, 4, 1, 7, 8, 5, 8, 5, 9, 4, 2, 6, 8, 4, 5, 4, 3,\n",
            "        0, 0, 7, 7, 7, 6, 8, 2, 4, 2, 0, 0, 8, 5, 7, 8, 0, 2, 6, 6, 4, 7, 5, 2,\n",
            "        4, 3, 4, 3, 6, 9, 7, 4, 0, 3, 5, 4, 3, 8, 0, 9, 6, 7, 6, 3, 4, 0, 7, 2,\n",
            "        7, 2, 9, 8, 1, 0, 0, 6, 1, 6, 4, 5, 7, 3, 5, 7, 5, 5, 1, 5, 2, 2, 2, 2,\n",
            "        0, 5, 7, 7, 1, 6, 4, 4, 5, 1, 5, 5, 9, 6, 6, 9, 6, 4, 3, 2, 5, 1, 8, 6,\n",
            "        3, 3, 6, 3, 1, 8, 5, 0, 6, 2, 0, 9, 3, 3, 2, 1, 2, 8, 8, 0, 2, 6, 4, 7,\n",
            "        8, 0, 6, 9, 2, 9, 1, 1, 5, 7, 3, 5, 4, 4, 0, 3, 3, 7, 1, 2, 1, 3, 2, 4,\n",
            "        1, 6, 1, 1, 5, 2, 4, 5, 7, 2, 7, 1, 8, 4, 6, 9, 8, 6, 3, 3, 6, 9, 6, 3,\n",
            "        0, 2, 3, 3, 0, 2, 9, 3, 9, 0, 3, 9, 0, 6, 8, 1, 4, 2, 4, 0, 2, 5, 8, 8,\n",
            "        9, 6, 0, 1, 5, 4, 7, 4, 1, 4, 2, 0, 3, 0, 6, 3, 7, 0, 8, 9, 8, 4, 3, 3,\n",
            "        4, 7, 2, 9, 7, 5, 9, 7, 4, 3, 7, 8, 1, 7, 3, 9, 9, 8, 2, 5, 2, 1, 6, 4,\n",
            "        9, 6, 8, 5, 4, 8, 5, 3, 6, 0, 3, 9, 9, 4, 6, 6, 0, 1, 4, 5, 8, 5, 1, 5,\n",
            "        3, 4, 1, 0, 7, 9, 5, 9, 2, 6, 6, 7, 5, 8, 1, 7, 3, 8, 0, 9, 4, 4, 9, 6,\n",
            "        2, 7, 2, 9, 8, 4, 9, 8, 8, 6, 6, 4, 5, 2, 9, 9, 4, 9, 4, 2, 9, 7, 0, 6,\n",
            "        6, 0, 3, 7, 9, 3, 4, 9])\n",
            "512\n",
            "tensor([7, 4, 0, 2, 2, 5, 4, 1, 4, 2, 5, 9, 8, 0, 3, 7, 5, 8, 5, 3, 3, 8, 1, 3,\n",
            "        3, 2, 7, 8, 1, 4, 1, 9, 1, 1, 6, 1, 2, 3, 9, 7, 9, 1, 3, 9, 4, 2, 6, 9,\n",
            "        2, 0, 8, 1, 2, 8, 5, 3, 8, 6, 0, 1, 3, 5, 9, 3, 0, 0, 1, 7, 5, 3, 8, 7,\n",
            "        4, 4, 8, 7, 3, 7, 3, 6, 6, 8, 2, 6, 8, 6, 7, 2, 7, 7, 6, 6, 5, 7, 5, 2,\n",
            "        4, 0, 3, 8, 4, 7, 4, 2, 3, 2, 5, 1, 0, 7, 4, 3, 1, 9, 9, 6, 4, 5, 2, 3,\n",
            "        1, 1, 3, 6, 3, 7, 8, 3, 4, 2, 1, 7, 5, 5, 9, 5, 6, 9, 7, 5, 5, 0, 5, 0,\n",
            "        9, 9, 1, 9, 1, 7, 6, 8, 5, 8, 6, 3, 3, 6, 1, 8, 9, 2, 3, 9, 4, 4, 8, 4,\n",
            "        7, 9, 8, 3, 6, 0, 3, 5, 2, 3, 3, 9, 5, 5, 2, 5, 5, 1, 1, 6, 8, 7, 6, 6,\n",
            "        6, 0, 6, 8, 3, 5, 4, 5, 3, 5, 7, 1, 1, 6, 1, 2, 9, 3, 1, 8, 0, 3, 5, 3,\n",
            "        5, 3, 3, 4, 9, 4, 4, 9, 1, 9, 7, 7, 1, 8, 9, 7, 8, 4, 6, 0, 6, 6, 4, 8,\n",
            "        3, 7, 5, 9, 7, 2, 3, 5, 5, 9, 3, 6, 0, 9, 5, 9, 3, 4, 0, 9, 3, 7, 2, 6,\n",
            "        4, 9, 6, 6, 0, 4, 2, 4, 4, 2, 1, 6, 1, 5, 9, 6, 1, 5, 0, 9, 1, 6, 7, 9,\n",
            "        2, 6, 9, 0, 6, 2, 7, 9, 3, 2, 9, 5, 2, 6, 6, 5, 3, 3, 9, 2, 0, 7, 0, 8,\n",
            "        1, 1, 2, 0, 8, 3, 9, 0, 1, 4, 1, 1, 9, 1, 9, 1, 1, 7, 3, 2, 6, 0, 8, 6,\n",
            "        8, 4, 2, 5, 4, 9, 8, 5, 3, 4, 4, 7, 3, 7, 5, 1, 3, 7, 0, 6, 7, 9, 9, 5,\n",
            "        9, 9, 9, 3, 7, 2, 2, 1, 9, 5, 9, 8, 0, 0, 1, 1, 2, 9, 0, 0, 2, 2, 5, 1,\n",
            "        1, 2, 6, 1, 0, 4, 6, 7, 1, 4, 3, 3, 2, 4, 7, 5, 6, 8, 2, 8, 9, 2, 8, 5,\n",
            "        9, 8, 3, 9, 0, 0, 3, 2, 1, 2, 8, 8, 0, 4, 2, 6, 1, 6, 5, 8, 1, 3, 5, 7,\n",
            "        4, 3, 2, 2, 4, 9, 1, 6, 7, 8, 7, 4, 3, 5, 6, 2, 5, 5, 9, 9, 8, 7, 0, 8,\n",
            "        5, 2, 0, 3, 0, 9, 8, 2, 8, 8, 5, 7, 8, 4, 6, 3, 2, 9, 5, 9, 5, 9, 6, 7,\n",
            "        0, 8, 5, 6, 1, 8, 4, 8, 2, 0, 6, 2, 3, 1, 2, 8, 0, 6, 0, 6, 0, 2, 4, 7,\n",
            "        6, 1, 5, 5, 6, 2, 7, 7])\n",
            "512\n",
            "tensor([5, 9, 3, 3, 4, 3, 0, 7, 9, 6, 7, 1, 8, 3, 9, 9, 7, 4, 5, 9, 7, 3, 9, 0,\n",
            "        0, 1, 8, 1, 6, 8, 9, 0, 3, 0, 2, 7, 9, 3, 7, 4, 3, 4, 8, 6, 9, 0, 7, 7,\n",
            "        8, 0, 6, 5, 5, 4, 9, 0, 9, 5, 5, 3, 4, 8, 5, 4, 0, 1, 1, 9, 2, 1, 3, 9,\n",
            "        0, 9, 5, 6, 6, 2, 7, 8, 4, 1, 5, 3, 4, 4, 7, 4, 0, 1, 5, 3, 2, 7, 1, 7,\n",
            "        1, 1, 4, 5, 7, 2, 4, 2, 8, 5, 0, 9, 7, 2, 2, 7, 6, 3, 1, 8, 8, 5, 5, 1,\n",
            "        7, 5, 3, 1, 4, 0, 0, 9, 4, 4, 7, 0, 0, 4, 4, 1, 1, 0, 3, 9, 7, 4, 2, 4,\n",
            "        6, 0, 8, 6, 1, 0, 5, 2, 8, 6, 1, 9, 5, 7, 8, 5, 9, 8, 7, 8, 6, 3, 7, 8,\n",
            "        6, 4, 5, 5, 2, 0, 3, 0, 4, 5, 7, 2, 0, 2, 4, 8, 1, 6, 5, 1, 4, 6, 6, 4,\n",
            "        4, 5, 4, 2, 2, 5, 0, 3, 8, 3, 7, 1, 0, 3, 8, 1, 6, 7, 8, 4, 3, 5, 3, 8,\n",
            "        4, 3, 8, 5, 0, 0, 6, 9, 3, 8, 9, 0, 9, 6, 3, 0, 7, 9, 1, 5, 8, 7, 8, 0,\n",
            "        7, 8, 6, 5, 7, 0, 6, 4, 7, 9, 4, 2, 9, 6, 3, 0, 0, 1, 2, 5, 2, 6, 6, 1,\n",
            "        2, 6, 0, 7, 8, 6, 1, 7, 5, 0, 1, 8, 0, 4, 6, 9, 6, 7, 6, 0, 5, 7, 3, 5,\n",
            "        1, 7, 4, 1, 3, 3, 0, 4, 4, 5, 3, 4, 9, 2, 6, 0, 3, 0, 1, 8, 6, 5, 1, 7,\n",
            "        6, 3, 1, 8, 8, 6, 9, 7, 1, 9, 0, 4, 1, 7, 5, 6, 6, 5, 0, 6, 2, 1, 4, 8,\n",
            "        7, 3, 6, 6, 7, 2, 0, 8, 6, 7, 2, 8, 1, 6, 0, 5, 4, 0, 0, 4, 1, 3, 6, 0,\n",
            "        7, 4, 4, 6, 8, 7, 1, 9, 1, 7, 3, 2, 9, 0, 7, 3, 4, 3, 8, 9, 5, 6, 7, 5,\n",
            "        4, 8, 5, 1, 5, 5, 0, 3, 4, 8, 0, 1, 3, 1, 9, 3, 9, 4, 5, 2, 3, 6, 1, 9,\n",
            "        2, 4, 1, 0, 0, 1, 0, 4, 1, 2, 0, 7, 6, 7, 0, 1, 7, 4, 6, 7, 6, 4, 8, 0,\n",
            "        9, 7, 4, 8, 3, 0, 9, 6, 2, 8, 1, 5, 4, 0, 9, 5, 3, 1, 0, 8, 8, 8, 1, 5,\n",
            "        7, 6, 5, 5, 7, 4, 6, 3, 2, 4, 1, 4, 0, 2, 5, 1, 4, 0, 5, 6, 8, 3, 5, 8,\n",
            "        4, 5, 0, 7, 5, 8, 5, 4, 0, 8, 7, 5, 1, 5, 7, 0, 4, 4, 7, 0, 8, 1, 2, 9,\n",
            "        1, 7, 6, 3, 2, 4, 6, 5])\n",
            "512\n",
            "tensor([6, 1, 8, 2, 8, 0, 1, 3, 2, 3, 4, 2, 2, 1, 6, 9, 8, 4, 0, 9, 7, 9, 6, 1,\n",
            "        4, 4, 6, 5, 2, 1, 1, 2, 5, 9, 7, 9, 2, 9, 5, 6, 0, 8, 5, 7, 6, 0, 0, 7,\n",
            "        6, 8, 7, 7, 4, 7, 4, 9, 3, 7, 2, 3, 0, 3, 6, 5, 1, 9, 0, 7, 8, 4, 2, 4,\n",
            "        1, 6, 4, 3, 6, 5, 8, 1, 5, 1, 5, 9, 0, 9, 5, 3, 3, 5, 6, 8, 3, 2, 3, 7,\n",
            "        8, 7, 4, 8, 2, 9, 3, 0, 9, 9, 5, 9, 0, 8, 8, 3, 8, 5, 4, 8, 3, 7, 1, 3,\n",
            "        0, 9, 8, 3, 0, 5, 1, 6, 5, 8, 3, 7, 2, 3, 3, 7, 9, 0, 2, 6, 3, 5, 2, 4,\n",
            "        5, 0, 5, 6, 4, 8, 6, 5, 3, 4, 1, 8, 4, 9, 9, 6, 8, 0, 6, 1, 7, 5, 5, 8,\n",
            "        5, 1, 7, 4, 5, 4, 3, 4, 9, 3, 8, 7, 7, 6, 0, 6, 8, 3, 8, 8, 1, 6, 6, 8,\n",
            "        3, 3, 0, 3, 9, 6, 3, 9, 7, 5, 6, 9, 4, 4, 7, 8, 5, 0, 5, 4, 9, 0, 7, 2,\n",
            "        9, 0, 3, 5, 5, 9, 7, 2, 7, 8, 0, 2, 9, 3, 2, 5, 8, 1, 2, 1, 3, 7, 2, 2,\n",
            "        1, 0, 9, 8, 9, 0, 1, 3, 6, 4, 1, 4, 6, 6, 9, 9, 6, 9, 7, 1, 2, 4, 0, 4,\n",
            "        7, 6, 4, 7, 3, 9, 1, 4, 2, 9, 8, 7, 6, 8, 9, 5, 1, 4, 8, 1, 0, 4, 6, 0,\n",
            "        1, 2, 2, 3, 0, 4, 8, 0, 1, 8, 3, 8, 3, 7, 4, 9, 6, 7, 4, 1, 6, 7, 0, 1,\n",
            "        0, 5, 7, 6, 7, 8, 6, 5, 7, 8, 8, 7, 6, 0, 9, 9, 3, 7, 5, 5, 0, 1, 4, 9,\n",
            "        6, 0, 4, 5, 6, 4, 7, 1, 0, 1, 9, 8, 6, 4, 8, 7, 9, 1, 4, 8, 4, 3, 3, 6,\n",
            "        2, 6, 2, 1, 1, 5, 2, 3, 4, 6, 6, 5, 7, 7, 2, 6, 0, 7, 8, 1, 2, 9, 4, 3,\n",
            "        0, 8, 6, 9, 6, 4, 3, 9, 6, 1, 3, 0, 6, 9, 0, 6, 6, 8, 2, 0, 4, 6, 8, 4,\n",
            "        8, 5, 6, 1, 1, 5, 8, 9, 7, 8, 6, 5, 6, 8, 6, 6, 0, 5, 4, 2, 6, 5, 6, 2,\n",
            "        1, 8, 7, 3, 2, 5, 2, 2, 8, 7, 6, 6, 5, 6, 6, 7, 7, 9, 4, 7, 4, 5, 3, 7,\n",
            "        2, 5, 6, 9, 2, 0, 3, 4, 1, 4, 7, 3, 9, 2, 4, 8, 4, 6, 0, 6, 4, 6, 3, 4,\n",
            "        8, 6, 7, 3, 2, 3, 0, 0, 5, 7, 3, 3, 3, 3, 9, 1, 9, 5, 5, 0, 0, 6, 4, 8,\n",
            "        6, 4, 4, 2, 4, 5, 8, 0])\n",
            "512\n",
            "tensor([1, 2, 9, 2, 3, 9, 5, 2, 0, 1, 6, 5, 9, 5, 3, 4, 4, 5, 0, 0, 4, 1, 5, 0,\n",
            "        2, 6, 0, 2, 0, 6, 9, 8, 7, 4, 0, 1, 4, 2, 6, 5, 7, 5, 2, 0, 9, 6, 5, 1,\n",
            "        8, 0, 1, 3, 2, 4, 4, 6, 9, 7, 9, 6, 3, 3, 7, 0, 9, 8, 1, 8, 9, 0, 0, 4,\n",
            "        0, 8, 8, 3, 7, 5, 6, 3, 8, 0, 0, 0, 9, 3, 0, 3, 9, 7, 5, 9, 6, 5, 8, 3,\n",
            "        9, 2, 5, 2, 9, 1, 4, 0, 3, 1, 0, 2, 1, 7, 9, 9, 0, 6, 5, 5, 1, 6, 3, 3,\n",
            "        4, 5, 2, 7, 8, 5, 7, 5, 9, 8, 3, 6, 3, 7, 7, 1, 1, 6, 4, 7, 0, 2, 8, 7,\n",
            "        6, 7, 1, 7, 3, 4, 2, 9, 8, 6, 2, 8, 1, 0, 7, 2, 5, 3, 9, 2, 0, 1, 2, 8,\n",
            "        0, 1, 4, 3, 7, 6, 4, 7, 5, 3, 8, 5, 2, 6, 5, 6, 1, 7, 1, 1, 0, 2, 9, 3,\n",
            "        4, 8, 5, 5, 3, 4, 3, 4, 4, 8, 1, 1, 7, 4, 7, 5, 5, 3, 6, 7, 2, 4, 6, 4,\n",
            "        4, 7, 1, 1, 6, 7, 6, 0, 6, 5, 7, 0, 2, 7, 1, 9, 8, 7, 4, 1, 4, 8, 9, 5,\n",
            "        0, 5, 3, 9, 7, 1, 0, 3, 3, 5, 6, 0, 2, 0, 5, 1, 7, 1, 8, 3, 8, 9, 0, 0,\n",
            "        9, 9, 1, 1, 3, 4, 0, 0, 0, 8, 1, 3, 9, 3, 4, 8, 5, 1, 7, 4, 0, 8, 7, 4,\n",
            "        6, 1, 4, 2, 1, 3, 4, 8, 5, 8, 7, 5, 4, 3, 7, 2, 3, 2, 9, 2, 5, 4, 2, 1,\n",
            "        4, 6, 2, 6, 8, 2, 8, 5, 6, 2, 9, 1, 5, 8, 1, 7, 5, 1, 4, 3, 1, 0, 9, 1,\n",
            "        7, 3, 9, 6, 5, 4, 4, 6, 0, 4, 2, 4, 2, 1, 3, 1, 7, 4, 9, 3, 8, 4, 6, 9,\n",
            "        0, 9, 5, 3, 8, 2, 6, 5, 4, 9, 0, 0, 6, 8, 2, 7, 1, 2, 2, 6, 9, 1, 1, 8,\n",
            "        9, 2, 4, 2, 6, 9, 2, 8, 1, 2, 9, 3, 8, 7, 6, 6, 0, 2, 8, 2, 7, 0, 4, 8,\n",
            "        9, 8, 1, 7, 7, 0, 4, 1, 8, 1, 1, 0, 7, 4, 1, 1, 5, 5, 8, 4, 4, 2, 0, 3,\n",
            "        0, 4, 5, 9, 3, 4, 5, 8, 2, 8, 6, 0, 8, 4, 8, 3, 9, 8, 2, 7, 4, 8, 4, 7,\n",
            "        6, 9, 7, 8, 6, 9, 8, 5, 7, 6, 3, 8, 4, 0, 1, 1, 2, 8, 1, 4, 1, 1, 0, 0,\n",
            "        5, 2, 3, 3, 7, 0, 5, 2, 4, 5, 9, 2, 7, 9, 2, 4, 9, 8, 2, 2, 6, 1, 5, 6,\n",
            "        3, 7, 6, 1, 7, 2, 6, 6])\n",
            "512\n",
            "tensor([2, 7, 2, 1, 6, 7, 5, 3, 6, 7, 9, 6, 0, 7, 9, 8, 8, 1, 0, 1, 1, 4, 9, 6,\n",
            "        6, 2, 1, 3, 1, 0, 2, 8, 1, 8, 7, 8, 4, 7, 2, 6, 7, 0, 4, 5, 3, 4, 1, 5,\n",
            "        3, 5, 7, 3, 4, 8, 3, 3, 5, 4, 1, 5, 0, 9, 8, 7, 1, 2, 4, 8, 2, 1, 2, 9,\n",
            "        8, 2, 5, 8, 1, 1, 1, 6, 6, 6, 6, 0, 7, 2, 1, 7, 8, 3, 9, 6, 6, 4, 1, 3,\n",
            "        2, 7, 0, 8, 0, 8, 2, 6, 9, 2, 7, 1, 2, 3, 1, 4, 9, 1, 2, 4, 0, 1, 6, 1,\n",
            "        1, 9, 9, 4, 5, 8, 3, 6, 3, 0, 2, 5, 2, 8, 3, 0, 9, 4, 2, 8, 4, 7, 9, 7,\n",
            "        4, 3, 4, 5, 2, 3, 6, 2, 8, 4, 9, 4, 8, 1, 0, 3, 2, 8, 2, 6, 7, 2, 7, 3,\n",
            "        5, 9, 1, 6, 1, 9, 1, 1, 2, 5, 3, 9, 3, 9, 5, 5, 5, 9, 7, 4, 5, 2, 5, 2,\n",
            "        3, 7, 4, 7, 0, 9, 7, 9, 7, 9, 1, 1, 6, 8, 9, 6, 6, 0, 7, 7, 4, 1, 1, 7,\n",
            "        4, 2, 2, 4, 5, 9, 7, 1, 8, 6, 8, 3, 2, 6, 3, 5, 2, 8, 5, 3, 5, 1, 6, 0,\n",
            "        6, 0, 6, 0, 2, 9, 9, 3, 6, 4, 6, 1, 9, 7, 9, 2, 4, 3, 8, 2, 7, 1, 5, 3,\n",
            "        0, 8, 0, 3, 9, 2, 5, 1, 5, 0, 6, 7, 9, 5, 7, 3, 1, 5, 9, 7, 2, 1, 7, 7,\n",
            "        9, 7, 9, 9, 9, 8, 6, 4, 2, 9, 8, 7, 2, 7, 1, 6, 0, 7, 7, 4, 6, 2, 2, 4,\n",
            "        5, 4, 8, 3, 3, 5, 7, 6, 0, 7, 2, 8, 6, 5, 7, 5, 1, 5, 0, 6, 8, 7, 9, 8,\n",
            "        5, 6, 4, 7, 6, 9, 9, 5, 1, 3, 5, 6, 3, 1, 1, 4, 6, 0, 2, 3, 7, 1, 6, 3,\n",
            "        5, 7, 9, 6, 5, 7, 2, 8, 1, 2, 8, 2, 3, 3, 2, 2, 7, 0, 9, 1, 3, 5, 9, 5,\n",
            "        3, 7, 5, 3, 1, 6, 0, 3, 1, 6, 0, 3, 7, 6, 5, 8, 2, 5, 0, 0, 2, 2, 4, 5,\n",
            "        1, 0, 4, 0, 1, 8, 3, 4, 9, 8, 5, 0, 1, 7, 7, 6, 1, 5, 8, 4, 2, 1, 9, 8,\n",
            "        5, 1, 6, 9, 7, 3, 1, 7, 6, 2, 0, 0, 4, 0, 9, 0, 9, 8, 8, 5, 7, 7, 0, 3,\n",
            "        6, 4, 2, 4, 5, 9, 4, 5, 7, 9, 6, 4, 4, 2, 2, 6, 9, 9, 3, 2, 8, 4, 3, 1,\n",
            "        1, 9, 5, 2, 3, 6, 6, 3, 5, 0, 9, 3, 5, 0, 2, 9, 9, 2, 2, 7, 5, 4, 9, 1,\n",
            "        8, 9, 2, 5, 5, 8, 3, 9])\n",
            "512\n",
            "tensor([3, 1, 8, 9, 5, 1, 7, 8, 2, 9, 2, 6, 6, 5, 5, 8, 6, 7, 1, 5, 1, 1, 5, 0,\n",
            "        4, 5, 3, 6, 9, 2, 5, 0, 0, 3, 4, 6, 3, 4, 7, 5, 0, 6, 0, 5, 0, 8, 9, 6,\n",
            "        1, 3, 5, 2, 1, 6, 8, 0, 1, 9, 6, 8, 8, 7, 8, 9, 9, 0, 9, 1, 2, 0, 3, 3,\n",
            "        3, 8, 9, 7, 9, 7, 1, 8, 2, 2, 3, 7, 7, 9, 0, 6, 9, 5, 9, 6, 3, 5, 4, 0,\n",
            "        7, 2, 3, 3, 4, 5, 1, 5, 8, 0, 5, 6, 5, 1, 6, 4, 6, 0, 6, 5, 3, 3, 1, 3,\n",
            "        4, 6, 3, 5, 4, 9, 6, 1, 3, 0, 7, 7, 0, 6, 0, 8, 5, 9, 8, 2, 5, 1, 1, 0,\n",
            "        7, 3, 8, 0, 5, 3, 8, 5, 1, 5, 0, 7, 2, 2, 3, 8, 4, 3, 6, 8, 4, 0, 9, 0,\n",
            "        6, 7, 2, 2, 6, 6, 8, 9, 1, 7, 7, 9, 2, 1, 1, 4, 1, 2, 1, 1, 4, 6, 8, 7,\n",
            "        2, 7, 9, 7, 7, 8, 7, 8, 3, 4, 1, 5, 5, 4, 5, 3, 3, 1, 9, 9, 5, 4, 9, 7,\n",
            "        4, 7, 4, 2, 2, 3, 5, 3, 0, 0, 5, 3, 4, 3, 8, 4, 5, 6, 3, 7, 8, 9, 2, 6,\n",
            "        4, 9, 3, 5, 7, 6, 8, 6, 6, 1, 0, 3, 7, 3, 3, 5, 4, 4, 5, 3, 9, 1, 9, 0,\n",
            "        6, 7, 8, 6, 2, 9, 1, 9, 9, 5, 0, 8, 1, 0, 5, 1, 4, 7, 0, 3, 1, 2, 8, 2,\n",
            "        0, 6, 3, 4, 6, 9, 2, 9, 9, 4, 5, 3, 8, 8, 4, 0, 4, 8, 5, 1, 2, 7, 1, 6,\n",
            "        2, 1, 4, 3, 7, 2, 8, 7, 4, 2, 8, 9, 6, 7, 6, 5, 5, 8, 5, 4, 9, 0, 5, 7,\n",
            "        0, 9, 7, 1, 2, 8, 1, 6, 3, 9, 2, 7, 4, 5, 8, 4, 1, 3, 6, 8, 1, 1, 2, 6,\n",
            "        5, 7, 6, 0, 2, 7, 4, 2, 7, 8, 4, 8, 5, 5, 4, 9, 8, 7, 6, 0, 9, 4, 5, 9,\n",
            "        7, 9, 3, 2, 6, 0, 4, 0, 2, 2, 3, 5, 3, 9, 3, 4, 6, 5, 1, 7, 6, 4, 9, 4,\n",
            "        3, 3, 7, 2, 4, 7, 2, 1, 7, 5, 6, 0, 0, 3, 5, 4, 8, 8, 1, 8, 1, 7, 6, 8,\n",
            "        1, 0, 0, 7, 1, 5, 8, 1, 9, 5, 1, 5, 1, 9, 3, 6, 7, 2, 5, 9, 0, 1, 5, 7,\n",
            "        5, 6, 5, 9, 9, 2, 1, 9, 7, 1, 8, 7, 9, 7, 0, 9, 5, 5, 3, 5, 7, 1, 1, 8,\n",
            "        9, 3, 7, 0, 2, 2, 4, 4, 9, 2, 9, 7, 6, 0, 9, 2, 0, 6, 7, 9, 6, 3, 4, 0,\n",
            "        4, 1, 0, 2, 8, 5, 0, 7])\n",
            "512\n",
            "tensor([8, 2, 8, 5, 5, 3, 3, 6, 7, 8, 4, 7, 5, 4, 6, 8, 4, 3, 8, 7, 0, 7, 7, 9,\n",
            "        1, 4, 9, 2, 5, 8, 2, 6, 7, 0, 4, 7, 0, 7, 8, 2, 1, 2, 8, 4, 7, 5, 2, 6,\n",
            "        5, 2, 7, 0, 0, 0, 1, 7, 1, 5, 9, 2, 2, 8, 7, 8, 9, 7, 7, 3, 1, 4, 6, 7,\n",
            "        9, 3, 5, 2, 9, 0, 6, 9, 3, 4, 1, 3, 3, 5, 3, 8, 4, 9, 9, 2, 7, 9, 9, 6,\n",
            "        6, 6, 4, 3, 8, 8, 2, 7, 2, 3, 9, 1, 1, 9, 4, 7, 3, 4, 7, 0, 7, 9, 7, 7,\n",
            "        8, 8, 8, 1, 8, 2, 3, 5, 4, 5, 4, 5, 4, 1, 2, 0, 0, 0, 7, 8, 2, 3, 5, 7,\n",
            "        7, 7, 1, 3, 8, 1, 8, 2, 0, 2, 0, 0, 4, 3, 1, 5, 2, 8, 1, 0, 4, 0, 5, 7,\n",
            "        1, 4, 1, 8, 0, 5, 7, 6, 3, 7, 7, 2, 3, 7, 0, 0, 6, 5, 1, 6, 9, 4, 5, 2,\n",
            "        9, 7, 1, 5, 3, 3, 6, 6, 0, 7, 7, 8, 6, 8, 8, 9, 7, 5, 4, 6, 1, 2, 0, 2,\n",
            "        0, 1, 0, 5, 7, 2, 0, 6, 9, 3, 0, 3, 3, 1, 8, 1, 7, 0, 6, 8, 8, 6, 2, 3,\n",
            "        1, 7, 4, 2, 1, 2, 8, 1, 7, 6, 5, 9, 6, 6, 5, 9, 4, 3, 7, 3, 3, 4, 2, 0,\n",
            "        7, 2, 6, 1, 9, 9, 7, 5, 2, 9, 3, 2, 7, 8, 5, 5, 8, 7, 8, 3, 2, 9, 1, 4,\n",
            "        3, 0, 6, 7, 9, 5, 1, 5, 0, 2, 1, 4, 9, 0, 2, 4, 3, 3, 2, 8, 9, 8, 0, 7,\n",
            "        0, 6, 0, 9, 7, 9, 6, 6, 0, 4, 5, 3, 6, 7, 7, 2, 7, 2, 3, 3, 0, 7, 2, 9,\n",
            "        7, 5, 8, 9, 7, 2, 7, 6, 3, 7, 6, 5, 3, 5, 6, 7, 9, 9, 4, 7, 2, 7, 6, 6,\n",
            "        2, 7, 4, 2, 0, 1, 6, 2, 0, 7, 4, 8, 4, 0, 7, 4, 5, 2, 7, 8, 3, 2, 9, 1,\n",
            "        6, 2, 5, 5, 6, 7, 4, 2, 1, 2, 3, 3, 8, 0, 3, 3, 1, 9, 4, 7, 8, 9, 1, 2,\n",
            "        4, 0, 2, 9, 8, 5, 5, 0, 4, 3, 5, 2, 3, 8, 0, 6, 3, 3, 3, 3, 0, 9, 9, 4,\n",
            "        3, 5, 3, 7, 6, 5, 4, 7, 0, 0, 8, 5, 0, 8, 2, 1, 2, 1, 1, 5, 0, 4, 4, 6,\n",
            "        8, 3, 7, 3, 9, 2, 7, 4, 3, 5, 0, 8, 8, 4, 7, 3, 7, 9, 0, 5, 5, 9, 7, 8,\n",
            "        9, 6, 9, 9, 1, 3, 7, 1, 3, 1, 5, 1, 2, 5, 9, 9, 8, 8, 4, 0, 4, 9, 2, 8,\n",
            "        1, 4, 1, 6, 8, 0, 4, 1])\n",
            "512\n",
            "tensor([7, 8, 7, 3, 6, 8, 6, 1, 9, 3, 1, 9, 5, 7, 6, 3, 3, 1, 4, 8, 3, 5, 1, 6,\n",
            "        3, 9, 4, 4, 1, 8, 5, 5, 7, 1, 2, 9, 6, 9, 4, 0, 4, 1, 4, 7, 0, 0, 3, 0,\n",
            "        7, 8, 2, 4, 0, 3, 4, 3, 5, 7, 1, 3, 9, 9, 7, 6, 6, 3, 8, 5, 0, 2, 0, 5,\n",
            "        0, 6, 2, 6, 0, 1, 0, 0, 3, 6, 4, 9, 1, 5, 5, 9, 4, 7, 3, 0, 1, 9, 2, 3,\n",
            "        4, 5, 8, 2, 6, 2, 9, 0, 9, 5, 8, 3, 7, 8, 2, 3, 3, 5, 8, 2, 4, 2, 4, 7,\n",
            "        1, 3, 2, 7, 1, 1, 6, 2, 6, 8, 5, 1, 9, 9, 7, 3, 1, 5, 6, 7, 9, 5, 2, 3,\n",
            "        3, 5, 4, 5, 4, 5, 7, 4, 9, 9, 0, 5, 6, 6, 5, 3, 6, 9, 6, 2, 5, 6, 8, 2,\n",
            "        3, 4, 6, 2, 3, 8, 3, 1, 0, 0, 8, 3, 1, 1, 1, 9, 2, 0, 8, 8, 0, 3, 6, 0,\n",
            "        4, 5, 4, 3, 0, 8, 9, 6, 4, 7, 2, 9, 9, 2, 3, 4, 6, 9, 4, 7, 6, 9, 0, 5,\n",
            "        0, 2, 2, 9, 4, 7, 1, 2, 8, 2, 8, 3, 0, 3, 0, 9, 0, 5, 0, 9, 5, 8, 5, 0,\n",
            "        3, 8, 2, 0, 3, 6, 5, 4, 9, 2, 9, 3, 7, 6, 2, 3, 8, 3, 1, 2, 8, 8, 1, 6,\n",
            "        4, 7, 6, 1, 1, 3, 1, 1, 5, 9, 6, 9, 3, 5, 7, 1, 1, 7, 9, 1, 3, 5, 6, 6,\n",
            "        2, 0, 7, 0, 5, 1, 5, 7, 0, 2, 4, 4, 2, 0, 9, 9, 2, 6, 3, 3, 1, 4, 2, 1,\n",
            "        5, 5, 3, 6, 4, 0, 4, 3, 5, 7, 1, 3, 8, 7, 4, 2, 5, 2, 3, 6, 8, 4, 4, 0,\n",
            "        5, 7, 2, 2, 9, 7, 0, 5, 4, 0, 0, 5, 9, 7, 7, 4, 0, 7, 9, 4, 1, 1, 1, 5,\n",
            "        5, 3, 5, 5, 8, 2, 5, 0, 2, 2, 8, 6, 0, 0, 8, 5, 7, 9, 9, 7, 1, 9, 8, 9,\n",
            "        2, 3, 1, 0, 3, 5, 9, 0, 3, 5, 9, 7, 1, 8, 5, 5, 2, 9, 9, 0, 4, 1, 4, 4,\n",
            "        1, 3, 6, 5, 0, 4, 1, 8, 1, 7, 3, 8, 2, 8, 6, 4, 3, 9, 1, 6, 8, 1, 0, 8,\n",
            "        0, 1, 8, 4, 2, 6, 0, 4, 5, 2, 1, 0, 5, 2, 1, 0, 6, 4, 0, 4, 1, 6, 7, 3,\n",
            "        8, 7, 2, 2, 5, 3, 2, 4, 4, 7, 8, 1, 8, 3, 5, 4, 6, 8, 1, 6, 2, 5, 9, 7,\n",
            "        0, 1, 8, 3, 9, 6, 5, 4, 4, 7, 0, 3, 6, 1, 4, 7, 1, 8, 8, 1, 9, 5, 7, 7,\n",
            "        5, 7, 0, 8, 7, 2, 5, 5])\n",
            "512\n",
            "tensor([2, 2, 3, 1, 6, 1, 2, 3, 7, 0, 5, 6, 9, 5, 1, 5, 1, 5, 3, 5, 0, 6, 1, 4,\n",
            "        5, 9, 6, 5, 0, 1, 6, 6, 2, 8, 6, 3, 2, 7, 7, 0, 4, 3, 0, 8, 4, 2, 2, 9,\n",
            "        0, 1, 9, 5, 3, 7, 7, 9, 0, 3, 7, 3, 8, 1, 8, 7, 4, 4, 1, 7, 2, 9, 3, 8,\n",
            "        9, 2, 9, 6, 5, 7, 1, 6, 5, 5, 0, 0, 9, 9, 7, 4, 8, 5, 6, 6, 3, 0, 7, 9,\n",
            "        1, 8, 2, 5, 9, 8, 9, 1, 4, 4, 9, 8, 2, 0, 7, 4, 0, 7, 7, 8, 6, 9, 5, 8,\n",
            "        8, 3, 8, 0, 7, 5, 8, 8, 1, 4, 5, 6, 9, 1, 6, 8, 7, 6, 2, 4, 2, 2, 7, 2,\n",
            "        9, 3, 7, 9, 0, 8, 4, 8, 5, 1, 5, 8, 1, 4, 3, 4, 0, 5, 5, 5, 4, 1, 5, 3,\n",
            "        2, 1, 7, 7, 4, 3, 1, 2, 4, 8, 7, 6, 4, 6, 2, 6, 5, 6, 6, 6, 2, 5, 7, 9,\n",
            "        9, 6, 2, 0, 0, 6, 3, 9, 8, 0, 0, 1, 4, 5, 1, 9, 1, 2, 2, 0, 2, 3, 2, 8,\n",
            "        9, 2, 2, 3, 9, 7, 1, 4, 3, 5, 3, 3, 2, 5, 2, 0, 3, 7, 3, 7, 8, 0, 6, 8,\n",
            "        3, 6, 5, 1, 2, 9, 7, 5, 0, 4, 1, 0, 0, 3, 3, 0, 7, 4, 5, 7, 0, 5, 2, 8,\n",
            "        1, 2, 8, 6, 0, 6, 0, 4, 8, 7, 0, 8, 2, 9, 1, 5, 7, 8, 0, 8, 7, 0, 0, 1,\n",
            "        2, 8, 9, 2, 9, 0, 4, 7, 6, 4, 0, 5, 1, 7, 5, 2, 9, 4, 3, 3, 2, 4, 6, 3,\n",
            "        4, 9, 4, 2, 1, 1, 5, 8, 2, 8, 2, 5, 2, 8, 7, 1, 1, 3, 4, 3, 7, 7, 7, 8,\n",
            "        6, 7, 8, 5, 3, 6, 3, 4, 7, 4, 9, 9, 0, 8, 6, 0, 7, 2, 9, 8, 2, 0, 1, 6,\n",
            "        4, 4, 1, 1, 1, 5, 7, 9, 8, 0, 2, 0, 7, 2, 8, 0, 8, 6, 6, 8, 4, 0, 1, 7,\n",
            "        5, 2, 4, 9, 5, 8, 0, 8, 8, 8, 7, 1, 7, 0, 0, 8, 5, 3, 5, 2, 5, 1, 5, 1,\n",
            "        1, 0, 9, 1, 9, 7, 5, 6, 3, 9, 7, 1, 8, 5, 2, 9, 7, 3, 8, 8, 7, 9, 7, 3,\n",
            "        3, 8, 1, 7, 7, 6, 1, 6, 5, 4, 3, 9, 8, 9, 9, 3, 0, 4, 9, 4, 3, 5, 6, 5,\n",
            "        6, 4, 1, 1, 2, 3, 6, 7, 8, 7, 6, 8, 3, 1, 7, 7, 8, 1, 1, 4, 2, 5, 9, 1,\n",
            "        0, 4, 8, 9, 2, 9, 5, 9, 3, 4, 6, 5, 0, 1, 4, 4, 1, 2, 3, 6, 1, 8, 8, 4,\n",
            "        9, 7, 5, 5, 6, 6, 9, 4])\n",
            "512\n",
            "tensor([1, 0, 6, 2, 3, 5, 7, 7, 6, 5, 8, 5, 7, 9, 0, 8, 5, 1, 4, 7, 8, 2, 6, 9,\n",
            "        6, 3, 2, 1, 3, 4, 2, 2, 1, 8, 7, 8, 8, 2, 5, 6, 1, 4, 0, 9, 0, 0, 2, 5,\n",
            "        0, 9, 6, 7, 1, 6, 1, 4, 7, 7, 2, 5, 5, 5, 1, 0, 3, 0, 9, 1, 3, 5, 2, 8,\n",
            "        9, 9, 2, 0, 0, 6, 4, 0, 7, 9, 1, 5, 7, 7, 0, 3, 6, 1, 2, 4, 4, 8, 4, 1,\n",
            "        3, 6, 9, 6, 8, 5, 1, 7, 2, 7, 5, 9, 9, 4, 2, 3, 2, 6, 8, 4, 2, 0, 5, 9,\n",
            "        2, 5, 9, 7, 5, 9, 5, 4, 8, 1, 3, 2, 7, 7, 0, 8, 8, 9, 9, 3, 4, 1, 6, 0,\n",
            "        6, 8, 0, 2, 4, 7, 0, 4, 4, 3, 7, 6, 7, 8, 1, 4, 9, 9, 2, 2, 0, 9, 1, 5,\n",
            "        7, 6, 9, 6, 9, 6, 6, 1, 1, 6, 2, 4, 1, 1, 1, 1, 5, 8, 5, 6, 5, 5, 8, 2,\n",
            "        8, 0, 8, 8, 1, 0, 6, 9, 8, 7, 3, 0, 1, 3, 8, 5, 5, 4, 2, 2, 8, 8, 6, 8,\n",
            "        9, 6, 2, 6, 0, 6, 3, 2, 2, 0, 8, 9, 2, 4, 9, 0, 9, 4, 4, 6, 4, 9, 3, 6,\n",
            "        4, 1, 2, 0, 0, 9, 3, 5, 3, 7, 3, 5, 5, 9, 1, 4, 4, 9, 9, 4, 1, 0, 6, 4,\n",
            "        2, 3, 6, 8, 4, 0, 5, 1, 6, 9, 5, 3, 0, 6, 1, 3, 5, 7, 0, 5, 7, 8, 1, 6,\n",
            "        7, 8, 7, 6, 1, 0, 3, 4, 9, 1, 9, 0, 6, 4, 6, 7, 7, 8, 1, 4, 9, 4, 8, 8,\n",
            "        4, 9, 2, 7, 9, 6, 7, 4, 3, 3, 7, 1, 3, 6, 1, 8, 0, 6, 3, 4, 7, 2, 0, 1,\n",
            "        4, 1, 5, 2, 9, 1, 8, 0, 4, 1, 3, 5, 0, 7, 1, 6, 5, 3, 0, 9, 9, 2, 3, 6,\n",
            "        6, 0, 7, 9, 0, 6, 9, 6, 4, 8, 5, 6, 3, 2, 7, 8, 9, 7, 8, 8, 7, 3, 8, 2,\n",
            "        4, 6, 9, 4, 9, 5, 0, 2, 7, 3, 1, 8, 3, 3, 8, 3, 7, 3, 9, 6, 2, 0, 3, 0,\n",
            "        7, 8, 1, 3, 0, 7, 9, 2, 3, 8, 3, 0, 0, 0, 9, 9, 5, 0, 8, 9, 8, 2, 4, 2,\n",
            "        3, 0, 2, 7, 1, 5, 9, 9, 2, 4, 2, 2, 4, 3, 1, 1, 8, 6, 8, 4, 8, 8, 2, 4,\n",
            "        3, 8, 8, 7, 4, 2, 2, 3, 8, 7, 3, 1, 3, 7, 2, 5, 5, 4, 6, 8, 3, 6, 1, 6,\n",
            "        8, 7, 3, 2, 0, 2, 4, 6, 6, 8, 6, 4, 2, 2, 5, 9, 5, 5, 1, 5, 8, 0, 4, 3,\n",
            "        2, 7, 5, 2, 5, 0, 9, 3])\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32mc:\\Users\\ASUS\\Desktop\\Image-Inpainting\\gan_image.ipynb Cell 18\u001b[0m line \u001b[0;36m1\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=10'>11</a>\u001b[0m batch_masked \u001b[39m=\u001b[39m batch\u001b[39m.\u001b[39mclone() \u001b[39m*\u001b[39m (\u001b[39m1\u001b[39m \u001b[39m-\u001b[39m masks)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=11'>12</a>\u001b[0m batch_masked \u001b[39m=\u001b[39m torch\u001b[39m.\u001b[39mcat((batch_masked, masks[:, :\u001b[39m1\u001b[39m]), dim\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m)\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=12'>13</a>\u001b[0m pred \u001b[39m=\u001b[39m model(batch_masked)\u001b[39m.\u001b[39mclamp(\u001b[39m0\u001b[39m, \u001b[39m1\u001b[39m)\u001b[39m.\u001b[39mdetach()\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=14'>15</a>\u001b[0m loss \u001b[39m+\u001b[39m\u001b[39m=\u001b[39m (((batch \u001b[39m-\u001b[39m pred) \u001b[39m*\u001b[39m masks)\u001b[39m*\u001b[39m\u001b[39m*\u001b[39m\u001b[39m2\u001b[39m)\u001b[39m.\u001b[39msum()\u001b[39m.\u001b[39mdetach()\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=15'>16</a>\u001b[0m pixels \u001b[39m+\u001b[39m\u001b[39m=\u001b[39m masks\u001b[39m.\u001b[39msum()\u001b[39m.\u001b[39mdetach()\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[0;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[0;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
            "\u001b[1;32mc:\\Users\\ASUS\\Desktop\\Image-Inpainting\\gan_image.ipynb Cell 18\u001b[0m line \u001b[0;36m5\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=55'>56</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, X):\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=56'>57</a>\u001b[0m     out \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mnet(X)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X24sZmlsZQ%3D%3D?line=57'>58</a>\u001b[0m     \u001b[39mreturn\u001b[39;00m out\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[0;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[0;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\container.py:217\u001b[0m, in \u001b[0;36mSequential.forward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    215\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m):\n\u001b[0;32m    216\u001b[0m     \u001b[39mfor\u001b[39;00m module \u001b[39min\u001b[39;00m \u001b[39mself\u001b[39m:\n\u001b[1;32m--> 217\u001b[0m         \u001b[39minput\u001b[39m \u001b[39m=\u001b[39m module(\u001b[39minput\u001b[39;49m)\n\u001b[0;32m    218\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39minput\u001b[39m\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[0;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[0;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\conv.py:956\u001b[0m, in \u001b[0;36mConvTranspose2d.forward\u001b[1;34m(self, input, output_size)\u001b[0m\n\u001b[0;32m    951\u001b[0m num_spatial_dims \u001b[39m=\u001b[39m \u001b[39m2\u001b[39m\n\u001b[0;32m    952\u001b[0m output_padding \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_output_padding(\n\u001b[0;32m    953\u001b[0m     \u001b[39minput\u001b[39m, output_size, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstride, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mkernel_size,  \u001b[39m# type: ignore[arg-type]\u001b[39;00m\n\u001b[0;32m    954\u001b[0m     num_spatial_dims, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mdilation)  \u001b[39m# type: ignore[arg-type]\u001b[39;00m\n\u001b[1;32m--> 956\u001b[0m \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39;49mconv_transpose2d(\n\u001b[0;32m    957\u001b[0m     \u001b[39minput\u001b[39;49m, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mweight, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mbias, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mstride, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mpadding,\n\u001b[0;32m    958\u001b[0m     output_padding, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mgroups, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mdilation)\n",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "model = generator\n",
        "model.eval()\n",
        "N = 512\n",
        "test_loader = iter(data.DataLoader(test, N, shuffle=True, pin_memory=False))\n",
        "print(test_loader)\n",
        "\n",
        "for batch, _ in test_loader:\n",
        "    print(batch.shape[0])\n",
        "    print(_)\n",
        "    masks, _ = gen_masks(batch.shape[0])\n",
        "    batch_masked = batch.clone() * (1 - masks)\n",
        "    batch_masked = torch.cat((batch_masked, masks[:, :1]), dim=1)\n",
        "    pred = model(batch_masked).clamp(0, 1).detach()\n",
        "\n",
        "    loss += (((batch - pred) * masks)**2).sum().detach()\n",
        "    pixels += masks.sum().detach()\n",
        "\n",
        "    inpainted = batch.clone()\n",
        "    masks_byte = masks.byte()\n",
        "    inpainted[masks_byte] = pred[masks_byte].view(-1)\n",
        "    border = torch.zeros((3, 32, 2)) + 0.2196\n",
        "\n",
        "print(loss / pixels)\n",
        "\n",
        "for i in range(batch.shape[0]):\n",
        "    imgs = [\n",
        "        #batch[i],\n",
        "        #border,\n",
        "        #batch_masked[:, :-1][i],\n",
        "        # pred[i],\n",
        "        #border,\n",
        "        inpainted[i]\n",
        "    ]\n",
        "    tmp = torch.cat(imgs, dim=2)\n",
        "    tensor_image = torch.Tensor(tmp)\n",
        "    image = tensor_image.permute(1, 2, 0).numpy() * 255\n",
        "    image = Image.fromarray(image.astype('uint8'))\n",
        "    image.save('duong_dan_cho_hinh_anh.png')\n",
        "    print(\"tmp\",tmp)\n",
        "    imshow(tmp)\n",
        "\n",
        "    plt.axis('off')\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "cK6gHBDTq25a"
      },
      "outputs": [],
      "source": [
        "model = torch.load('generator.pt')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "UUmYXOMWqqhv",
        "outputId": "f968ee74-7cca-4629-b284-eb22e53063c1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<torch.utils.data.dataloader._SingleProcessDataLoaderIter object at 0x000002712947F690>\n",
            "512\n",
            "tensor([9, 9, 5, 5, 1, 6, 7, 3, 0, 7, 5, 0, 3, 7, 9, 4, 3, 6, 3, 0, 6, 9, 2, 1,\n",
            "        6, 1, 2, 1, 9, 7, 1, 2, 3, 1, 8, 6, 8, 1, 9, 6, 8, 8, 9, 1, 5, 5, 8, 2,\n",
            "        6, 8, 7, 3, 0, 2, 5, 6, 0, 0, 3, 3, 4, 5, 8, 7, 4, 4, 8, 7, 4, 6, 8, 6,\n",
            "        3, 8, 5, 7, 8, 7, 6, 1, 9, 5, 5, 0, 8, 8, 1, 2, 6, 3, 3, 9, 0, 0, 7, 4,\n",
            "        2, 6, 8, 4, 4, 5, 9, 8, 2, 0, 3, 5, 4, 3, 0, 1, 6, 6, 9, 3, 5, 6, 4, 6,\n",
            "        5, 9, 5, 0, 1, 5, 1, 8, 9, 2, 4, 8, 6, 7, 0, 5, 5, 8, 5, 4, 9, 2, 0, 1,\n",
            "        9, 6, 4, 8, 2, 3, 8, 8, 9, 5, 5, 6, 2, 7, 8, 9, 9, 6, 3, 8, 9, 2, 6, 0,\n",
            "        2, 5, 6, 3, 3, 7, 3, 7, 8, 7, 2, 9, 9, 1, 8, 7, 6, 5, 5, 3, 2, 9, 0, 0,\n",
            "        3, 0, 7, 5, 5, 2, 2, 1, 6, 2, 4, 8, 0, 0, 1, 0, 6, 1, 9, 9, 0, 8, 6, 5,\n",
            "        1, 4, 7, 7, 7, 8, 4, 6, 4, 8, 7, 5, 6, 7, 0, 5, 9, 7, 4, 4, 6, 0, 7, 4,\n",
            "        2, 9, 1, 1, 5, 7, 9, 8, 9, 4, 1, 6, 4, 0, 1, 9, 8, 0, 5, 1, 5, 0, 7, 7,\n",
            "        7, 6, 6, 4, 5, 0, 4, 7, 5, 1, 1, 2, 4, 0, 4, 7, 7, 4, 5, 2, 4, 7, 6, 6,\n",
            "        5, 8, 6, 9, 3, 5, 2, 5, 3, 4, 8, 4, 2, 7, 3, 4, 3, 0, 9, 0, 5, 2, 7, 5,\n",
            "        1, 1, 8, 0, 8, 3, 4, 3, 3, 6, 0, 0, 2, 4, 3, 7, 5, 3, 8, 0, 4, 4, 6, 0,\n",
            "        7, 3, 3, 2, 5, 9, 9, 9, 2, 0, 2, 1, 3, 2, 4, 1, 2, 7, 6, 1, 6, 9, 7, 5,\n",
            "        6, 3, 9, 9, 6, 4, 5, 7, 6, 4, 5, 9, 7, 5, 7, 1, 8, 2, 3, 7, 2, 9, 0, 7,\n",
            "        7, 0, 0, 9, 4, 6, 7, 1, 7, 0, 1, 0, 3, 4, 7, 0, 2, 7, 2, 1, 7, 9, 9, 9,\n",
            "        7, 7, 4, 6, 0, 8, 3, 3, 1, 8, 8, 7, 7, 1, 6, 4, 2, 5, 8, 2, 1, 1, 4, 4,\n",
            "        1, 1, 4, 2, 8, 7, 9, 2, 8, 9, 6, 0, 7, 3, 7, 5, 4, 8, 0, 6, 0, 4, 8, 1,\n",
            "        6, 2, 1, 0, 9, 6, 1, 9, 0, 5, 5, 1, 5, 5, 2, 7, 7, 1, 1, 1, 7, 5, 3, 7,\n",
            "        4, 9, 5, 0, 6, 6, 0, 0, 9, 6, 2, 0, 1, 3, 1, 7, 8, 2, 5, 5, 9, 7, 0, 7,\n",
            "        7, 3, 1, 9, 7, 9, 8, 8])\n"
          ]
        },
        {
          "ename": "AttributeError",
          "evalue": "'Generator' object has no attribute 'gen_masks'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[1;32mc:\\Users\\ASUS\\Desktop\\Image-Inpainting\\gan_image.ipynb Cell 20\u001b[0m line \u001b[0;36m1\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X26sZmlsZQ%3D%3D?line=7'>8</a>\u001b[0m \u001b[39mprint\u001b[39m(batch\u001b[39m.\u001b[39mshape[\u001b[39m0\u001b[39m])\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X26sZmlsZQ%3D%3D?line=8'>9</a>\u001b[0m \u001b[39mprint\u001b[39m(_)\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X26sZmlsZQ%3D%3D?line=9'>10</a>\u001b[0m masks, _ \u001b[39m=\u001b[39m model\u001b[39m.\u001b[39;49mgen_masks(batch\u001b[39m.\u001b[39mshape[\u001b[39m0\u001b[39m])\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X26sZmlsZQ%3D%3D?line=10'>11</a>\u001b[0m batch_masked \u001b[39m=\u001b[39m batch\u001b[39m.\u001b[39mclone() \u001b[39m*\u001b[39m (\u001b[39m1\u001b[39m \u001b[39m-\u001b[39m masks)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/ASUS/Desktop/Image-Inpainting/gan_image.ipynb#X26sZmlsZQ%3D%3D?line=11'>12</a>\u001b[0m batch_masked \u001b[39m=\u001b[39m torch\u001b[39m.\u001b[39mcat((batch_masked, masks[:, :\u001b[39m1\u001b[39m]), dim\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m)\n",
            "File \u001b[1;32mc:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1614\u001b[0m, in \u001b[0;36mModule.__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   1612\u001b[0m     \u001b[39mif\u001b[39;00m name \u001b[39min\u001b[39;00m modules:\n\u001b[0;32m   1613\u001b[0m         \u001b[39mreturn\u001b[39;00m modules[name]\n\u001b[1;32m-> 1614\u001b[0m \u001b[39mraise\u001b[39;00m \u001b[39mAttributeError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39m'\u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m'\u001b[39m\u001b[39m object has no attribute \u001b[39m\u001b[39m'\u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m'\u001b[39m\u001b[39m\"\u001b[39m\u001b[39m.\u001b[39mformat(\n\u001b[0;32m   1615\u001b[0m     \u001b[39mtype\u001b[39m(\u001b[39mself\u001b[39m)\u001b[39m.\u001b[39m\u001b[39m__name__\u001b[39m, name))\n",
            "\u001b[1;31mAttributeError\u001b[0m: 'Generator' object has no attribute 'gen_masks'"
          ]
        }
      ],
      "source": [
        "\n",
        "model = generator\n",
        "model.eval()\n",
        "N = 512\n",
        "test_loader = iter(data.DataLoader(test, N, shuffle=True, pin_memory=False))\n",
        "print(test_loader)\n",
        "\n",
        "for batch, _ in test_loader:\n",
        "    print(batch.shape[0])\n",
        "    print(_)\n",
        "    masks, _ = model.gen_masks(batch.shape[0])\n",
        "    batch_masked = batch.clone() * (1 - masks)\n",
        "    batch_masked = torch.cat((batch_masked, masks[:, :1]), dim=1)\n",
        "    pred = model.model(batch_masked).clamp(0, 1).detach()\n",
        "\n",
        "    loss += (((batch - pred) * masks)**2).sum().detach()\n",
        "    pixels += masks.sum().detach()\n",
        "\n",
        "    inpainted = batch.clone()\n",
        "    masks_byte = masks.byte()\n",
        "    inpainted[masks_byte] = pred[masks_byte].view(-1)\n",
        "    border = torch.zeros((3, 32, 2)) + 0.2196\n",
        "\n",
        "print(loss / pixels)\n",
        "\n",
        "for i in range(batch.shape[0]):\n",
        "    imgs = [\n",
        "        #batch[i],\n",
        "        #border,\n",
        "        #batch_masked[:, :-1][i],\n",
        "        # pred[i],\n",
        "        #border,\n",
        "        inpainted[i]\n",
        "    ]\n",
        "    tmp = torch.cat(imgs, dim=2)\n",
        "    tensor_image = torch.Tensor(tmp)\n",
        "    image = tensor_image.permute(1, 2, 0).numpy() * 255\n",
        "    image = Image.fromarray(image.astype('uint8'))\n",
        "    image.save('duong_dan_cho_hinh_anh.png')\n",
        "    print(\"tmp\",tmp)\n",
        "    imshow(tmp)\n",
        "\n",
        "    plt.axis('off')\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yITH0w2EqkqQ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0NdCygALSuuW",
        "outputId": "b82609a9-6fa2-4f60-ae37-8d234e165555"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "model_save_name = 'generator1.pt'\n",
        "torch.save(generator.state_dict(), model_save_name)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sJYiPzYASoea"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
